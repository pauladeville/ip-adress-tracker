{"mappings":"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","sources":["node_modules/process/browser.js","node_modules/@firebase/util/src/constants.ts","node_modules/@firebase/util/src/crypt.ts","node_modules/@firebase/util/src/defaults.ts","node_modules/@firebase/util/src/global.ts","node_modules/@firebase/util/src/deferred.ts","node_modules/@firebase/util/src/environment.ts","node_modules/@firebase/util/src/errors.ts","node_modules/@firebase/util/src/obj.ts","node_modules/@firebase/util/src/utf8.ts","node_modules/@firebase/util/src/exponential_backoff.ts","node_modules/@firebase/util/src/compat.ts","node_modules/@firebase/component/src/component.ts","node_modules/@firebase/component/src/constants.ts","node_modules/@firebase/component/src/provider.ts","node_modules/@firebase/component/src/component_container.ts","node_modules/@firebase/logger/src/logger.ts","node_modules/idb/build/wrap-idb-value.js","node_modules/idb/build/index.js","node_modules/@firebase/app/src/platformLoggerService.ts","node_modules/@firebase/app/src/logger.ts","node_modules/@firebase/app/src/constants.ts","node_modules/@firebase/app/src/internal.ts","node_modules/@firebase/app/src/errors.ts","node_modules/@firebase/app/src/firebaseApp.ts","node_modules/@firebase/app/src/api.ts","node_modules/@firebase/app/src/indexeddb.ts","node_modules/@firebase/app/src/heartbeatService.ts","node_modules/@firebase/app/src/registerCoreComponents.ts","node_modules/@firebase/app/src/index.ts","node_modules/firebase/app/index.ts","node_modules/@firebase/installations/src/util/constants.ts","node_modules/@firebase/installations/src/util/errors.ts","node_modules/@firebase/installations/src/functions/common.ts","node_modules/@firebase/installations/src/util/sleep.ts","node_modules/@firebase/installations/src/helpers/generate-fid.ts","node_modules/@firebase/installations/src/helpers/buffer-to-base64-url-safe.ts","node_modules/@firebase/installations/src/util/get-key.ts","node_modules/@firebase/installations/src/helpers/fid-changed.ts","node_modules/@firebase/installations/src/helpers/idb-manager.ts","node_modules/@firebase/installations/src/helpers/get-installation-entry.ts","node_modules/@firebase/installations/src/functions/create-installation-request.ts","node_modules/@firebase/installations/src/functions/generate-auth-token-request.ts","node_modules/@firebase/installations/src/helpers/refresh-auth-token.ts","node_modules/@firebase/installations/src/api/get-token.ts","node_modules/@firebase/installations/src/helpers/extract-app-config.ts","node_modules/@firebase/installations/src/functions/config.ts","node_modules/@firebase/installations/src/api/get-id.ts","node_modules/@firebase/installations/src/index.ts","node_modules/@firebase/analytics/src/constants.ts","node_modules/@firebase/analytics/src/logger.ts","node_modules/@firebase/analytics/src/errors.ts","node_modules/@firebase/analytics/src/helpers.ts","node_modules/@firebase/analytics/src/get-config.ts","node_modules/@firebase/analytics/src/functions.ts","node_modules/@firebase/analytics/src/initialize-analytics.ts","node_modules/@firebase/analytics/src/factory.ts","node_modules/@firebase/analytics/src/api.ts","node_modules/@firebase/analytics/src/index.ts","node_modules/@firebase/performance/src/constants.ts","node_modules/@firebase/performance/src/utils/errors.ts","node_modules/@firebase/performance/src/utils/console_logger.ts","node_modules/@firebase/performance/src/services/api_service.ts","node_modules/@firebase/performance/src/services/iid_service.ts","node_modules/@firebase/performance/src/services/settings_service.ts","node_modules/@firebase/performance/src/utils/string_merger.ts","node_modules/@firebase/performance/src/utils/attributes_utils.ts","node_modules/@firebase/performance/src/utils/app_utils.ts","node_modules/@firebase/performance/src/services/remote_config_service.ts","node_modules/@firebase/performance/src/services/initialization_service.ts","node_modules/@firebase/performance/src/services/transport_service.ts","node_modules/@firebase/performance/src/services/perf_logger.ts","node_modules/@firebase/performance/src/utils/metric_utils.ts","node_modules/@firebase/performance/src/resources/trace.ts","node_modules/@firebase/performance/src/resources/network_request.ts","node_modules/@firebase/performance/src/services/oob_resources_service.ts","node_modules/@firebase/performance/src/controllers/perf.ts","node_modules/@firebase/performance/src/index.ts","app.js"],"sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.\n */\n\nexport const CONSTANTS = {\n  /**\n   * @define {boolean} Whether this is the client Node.js SDK.\n   */\n  NODE_CLIENT: false,\n  /**\n   * @define {boolean} Whether this is the Admin Node.js SDK.\n   */\n  NODE_ADMIN: false,\n\n  /**\n   * Firebase SDK Version\n   */\n  SDK_VERSION: '${JSCORE_VERSION}'\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst stringToByteArray = function (str: string): number[] {\n  // TODO(user): Use native implementations if/when available\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (\n      (c & 0xfc00) === 0xd800 &&\n      i + 1 < str.length &&\n      (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00\n    ) {\n      // Surrogate Pair\n      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Turns an array of numbers into the string given by the concatenation of the\n * characters to which the numbers correspond.\n * @param bytes Array of numbers representing characters.\n * @return Stringification of the array.\n */\nconst byteArrayToString = function (bytes: number[]): string {\n  // TODO(user): Use native implementations if/when available\n  const out: string[] = [];\n  let pos = 0,\n    c = 0;\n  while (pos < bytes.length) {\n    const c1 = bytes[pos++];\n    if (c1 < 128) {\n      out[c++] = String.fromCharCode(c1);\n    } else if (c1 > 191 && c1 < 224) {\n      const c2 = bytes[pos++];\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\n    } else if (c1 > 239 && c1 < 365) {\n      // Surrogate Pair\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      const c4 = bytes[pos++];\n      const u =\n        (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -\n        0x10000;\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\n    } else {\n      const c2 = bytes[pos++];\n      const c3 = bytes[pos++];\n      out[c++] = String.fromCharCode(\n        ((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)\n      );\n    }\n  }\n  return out.join('');\n};\n\ninterface Base64 {\n  byteToCharMap_: { [key: number]: string } | null;\n  charToByteMap_: { [key: string]: number } | null;\n  byteToCharMapWebSafe_: { [key: number]: string } | null;\n  charToByteMapWebSafe_: { [key: string]: number } | null;\n  ENCODED_VALS_BASE: string;\n  readonly ENCODED_VALS: string;\n  readonly ENCODED_VALS_WEBSAFE: string;\n  HAS_NATIVE_SUPPORT: boolean;\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string;\n  encodeString(input: string, webSafe?: boolean): string;\n  decodeString(input: string, webSafe: boolean): string;\n  decodeStringToByteArray(input: string, webSafe: boolean): number[];\n  init_(): void;\n}\n\n// We define it as an object literal instead of a class because a class compiled down to es5 can't\n// be treeshaked. https://github.com/rollup/rollup/issues/1691\n// Static lookup maps, lazily populated by init_()\nexport const base64: Base64 = {\n  /**\n   * Maps bytes to characters.\n   */\n  byteToCharMap_: null,\n\n  /**\n   * Maps characters to bytes.\n   */\n  charToByteMap_: null,\n\n  /**\n   * Maps bytes to websafe characters.\n   * @private\n   */\n  byteToCharMapWebSafe_: null,\n\n  /**\n   * Maps websafe characters to bytes.\n   * @private\n   */\n  charToByteMapWebSafe_: null,\n\n  /**\n   * Our default alphabet, shared between\n   * ENCODED_VALS and ENCODED_VALS_WEBSAFE\n   */\n  ENCODED_VALS_BASE:\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',\n\n  /**\n   * Our default alphabet. Value 64 (=) is special; it means \"nothing.\"\n   */\n  get ENCODED_VALS() {\n    return this.ENCODED_VALS_BASE + '+/=';\n  },\n\n  /**\n   * Our websafe alphabet.\n   */\n  get ENCODED_VALS_WEBSAFE() {\n    return this.ENCODED_VALS_BASE + '-_.';\n  },\n\n  /**\n   * Whether this browser supports the atob and btoa functions. This extension\n   * started at Mozilla but is now implemented by many browsers. We use the\n   * ASSUME_* variables to avoid pulling in the full useragent detection library\n   * but still allowing the standard per-browser compilations.\n   *\n   */\n  HAS_NATIVE_SUPPORT: typeof atob === 'function',\n\n  /**\n   * Base64-encode an array of bytes.\n   *\n   * @param input An array of bytes (numbers with\n   *     value in [0, 255]) to encode.\n   * @param webSafe Boolean indicating we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeByteArray(input: number[] | Uint8Array, webSafe?: boolean): string {\n    if (!Array.isArray(input)) {\n      throw Error('encodeByteArray takes an array as a parameter');\n    }\n\n    this.init_();\n\n    const byteToCharMap = webSafe\n      ? this.byteToCharMapWebSafe_!\n      : this.byteToCharMap_!;\n\n    const output = [];\n\n    for (let i = 0; i < input.length; i += 3) {\n      const byte1 = input[i];\n      const haveByte2 = i + 1 < input.length;\n      const byte2 = haveByte2 ? input[i + 1] : 0;\n      const haveByte3 = i + 2 < input.length;\n      const byte3 = haveByte3 ? input[i + 2] : 0;\n\n      const outByte1 = byte1 >> 2;\n      const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);\n      let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);\n      let outByte4 = byte3 & 0x3f;\n\n      if (!haveByte3) {\n        outByte4 = 64;\n\n        if (!haveByte2) {\n          outByte3 = 64;\n        }\n      }\n\n      output.push(\n        byteToCharMap[outByte1],\n        byteToCharMap[outByte2],\n        byteToCharMap[outByte3],\n        byteToCharMap[outByte4]\n      );\n    }\n\n    return output.join('');\n  },\n\n  /**\n   * Base64-encode a string.\n   *\n   * @param input A string to encode.\n   * @param webSafe If true, we should use the\n   *     alternative alphabet.\n   * @return The base64 encoded string.\n   */\n  encodeString(input: string, webSafe?: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return btoa(input);\n    }\n    return this.encodeByteArray(stringToByteArray(input), webSafe);\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * @param input to decode.\n   * @param webSafe True if we should use the\n   *     alternative alphabet.\n   * @return string representing the decoded value.\n   */\n  decodeString(input: string, webSafe: boolean): string {\n    // Shortcut for Mozilla browsers that implement\n    // a native base64 encoder in the form of \"btoa/atob\"\n    if (this.HAS_NATIVE_SUPPORT && !webSafe) {\n      return atob(input);\n    }\n    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));\n  },\n\n  /**\n   * Base64-decode a string.\n   *\n   * In base-64 decoding, groups of four characters are converted into three\n   * bytes.  If the encoder did not apply padding, the input length may not\n   * be a multiple of 4.\n   *\n   * In this case, the last group will have fewer than 4 characters, and\n   * padding will be inferred.  If the group has one or two characters, it decodes\n   * to one byte.  If the group has three characters, it decodes to two bytes.\n   *\n   * @param input Input to decode.\n   * @param webSafe True if we should use the web-safe alphabet.\n   * @return bytes representing the decoded value.\n   */\n  decodeStringToByteArray(input: string, webSafe: boolean): number[] {\n    this.init_();\n\n    const charToByteMap = webSafe\n      ? this.charToByteMapWebSafe_!\n      : this.charToByteMap_!;\n\n    const output: number[] = [];\n\n    for (let i = 0; i < input.length; ) {\n      const byte1 = charToByteMap[input.charAt(i++)];\n\n      const haveByte2 = i < input.length;\n      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;\n      ++i;\n\n      const haveByte3 = i < input.length;\n      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      const haveByte4 = i < input.length;\n      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;\n      ++i;\n\n      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {\n        throw new DecodeBase64StringError();\n      }\n\n      const outByte1 = (byte1 << 2) | (byte2 >> 4);\n      output.push(outByte1);\n\n      if (byte3 !== 64) {\n        const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);\n        output.push(outByte2);\n\n        if (byte4 !== 64) {\n          const outByte3 = ((byte3 << 6) & 0xc0) | byte4;\n          output.push(outByte3);\n        }\n      }\n    }\n\n    return output;\n  },\n\n  /**\n   * Lazy static initialization function. Called before\n   * accessing any of the static map variables.\n   * @private\n   */\n  init_() {\n    if (!this.byteToCharMap_) {\n      this.byteToCharMap_ = {};\n      this.charToByteMap_ = {};\n      this.byteToCharMapWebSafe_ = {};\n      this.charToByteMapWebSafe_ = {};\n\n      // We want quick mappings back and forth, so we precompute two maps.\n      for (let i = 0; i < this.ENCODED_VALS.length; i++) {\n        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);\n        this.charToByteMap_[this.byteToCharMap_[i]] = i;\n        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);\n        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;\n\n        // Be forgiving when decoding and correctly decode both encodings.\n        if (i >= this.ENCODED_VALS_BASE.length) {\n          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;\n          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;\n        }\n      }\n    }\n  }\n};\n\n/**\n * An error encountered while decoding base64 string.\n */\nexport class DecodeBase64StringError extends Error {\n  readonly name = 'DecodeBase64StringError';\n}\n\n/**\n * URL-safe base64 encoding\n */\nexport const base64Encode = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  return base64.encodeByteArray(utf8Bytes, true);\n};\n\n/**\n * URL-safe base64 encoding (without \".\" padding in the end).\n * e.g. Used in JSON Web Token (JWT) parts.\n */\nexport const base64urlEncodeWithoutPadding = function (str: string): string {\n  // Use base64url encoding and remove padding in the end (dot characters).\n  return base64Encode(str).replace(/\\./g, '');\n};\n\n/**\n * URL-safe base64 decoding\n *\n * NOTE: DO NOT use the global atob() function - it does NOT support the\n * base64Url variant encoding.\n *\n * @param str To be decoded\n * @return Decoded result, if possible\n */\nexport const base64Decode = function (str: string): string | null {\n  try {\n    return base64.decodeString(str, true);\n  } catch (e) {\n    console.error('base64Decode failed: ', e);\n  }\n  return null;\n};\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Decode } from './crypt';\nimport { getGlobal } from './global';\n\n/**\n * Keys for experimental properties on the `FirebaseDefaults` object.\n * @public\n */\nexport type ExperimentalKey = 'authTokenSyncURL' | 'authIdTokenMaxAge';\n\n/**\n * An object that can be injected into the environment as __FIREBASE_DEFAULTS__,\n * either as a property of globalThis, a shell environment variable, or a\n * cookie.\n *\n * This object can be used to automatically configure and initialize\n * a Firebase app as well as any emulators.\n *\n * @public\n */\nexport interface FirebaseDefaults {\n  config?: Record<string, string>;\n  emulatorHosts?: Record<string, string>;\n  _authTokenSyncURL?: string;\n  _authIdTokenMaxAge?: number;\n  /**\n   * Override Firebase's runtime environment detection and\n   * force the SDK to act as if it were in the specified environment.\n   */\n  forceEnvironment?: 'browser' | 'node';\n  [key: string]: unknown;\n}\n\ndeclare global {\n  // Need `var` for this to work.\n  // eslint-disable-next-line no-var\n  var __FIREBASE_DEFAULTS__: FirebaseDefaults | undefined;\n}\n\nconst getDefaultsFromGlobal = (): FirebaseDefaults | undefined =>\n  getGlobal().__FIREBASE_DEFAULTS__;\n\n/**\n * Attempt to read defaults from a JSON string provided to\n * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in\n * process(.)env(.)__FIREBASE_DEFAULTS_PATH__\n * The dots are in parens because certain compilers (Vite?) cannot\n * handle seeing that variable in comments.\n * See https://github.com/firebase/firebase-js-sdk/issues/6838\n */\nconst getDefaultsFromEnvVariable = (): FirebaseDefaults | undefined => {\n  if (typeof process === 'undefined' || typeof process.env === 'undefined') {\n    return;\n  }\n  const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;\n  if (defaultsJsonString) {\n    return JSON.parse(defaultsJsonString);\n  }\n};\n\nconst getDefaultsFromCookie = (): FirebaseDefaults | undefined => {\n  if (typeof document === 'undefined') {\n    return;\n  }\n  let match;\n  try {\n    match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);\n  } catch (e) {\n    // Some environments such as Angular Universal SSR have a\n    // `document` object but error on accessing `document.cookie`.\n    return;\n  }\n  const decoded = match && base64Decode(match[1]);\n  return decoded && JSON.parse(decoded);\n};\n\n/**\n * Get the __FIREBASE_DEFAULTS__ object. It checks in order:\n * (1) if such an object exists as a property of `globalThis`\n * (2) if such an object was provided on a shell environment variable\n * (3) if such an object exists in a cookie\n * @public\n */\nexport const getDefaults = (): FirebaseDefaults | undefined => {\n  try {\n    return (\n      getDefaultsFromGlobal() ||\n      getDefaultsFromEnvVariable() ||\n      getDefaultsFromCookie()\n    );\n  } catch (e) {\n    /**\n     * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due\n     * to any environment case we have not accounted for. Log to\n     * info instead of swallowing so we can find these unknown cases\n     * and add paths for them if needed.\n     */\n    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);\n    return;\n  }\n};\n\n/**\n * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available\n * @public\n */\nexport const getDefaultEmulatorHost = (\n  productName: string\n): string | undefined => getDefaults()?.emulatorHosts?.[productName];\n\n/**\n * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object\n * for the given product.\n * @returns a pair of hostname and port like `[\"::1\", 4000]` if available\n * @public\n */\nexport const getDefaultEmulatorHostnameAndPort = (\n  productName: string\n): [hostname: string, port: number] | undefined => {\n  const host = getDefaultEmulatorHost(productName);\n  if (!host) {\n    return undefined;\n  }\n  const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.\n  if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {\n    throw new Error(`Invalid host ${host} with no separate hostname and port!`);\n  }\n  // eslint-disable-next-line no-restricted-globals\n  const port = parseInt(host.substring(separatorIndex + 1), 10);\n  if (host[0] === '[') {\n    // Bracket-quoted `[ipv6addr]:port` => return \"ipv6addr\" (without brackets).\n    return [host.substring(1, separatorIndex - 1), port];\n  } else {\n    return [host.substring(0, separatorIndex), port];\n  }\n};\n\n/**\n * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.\n * @public\n */\nexport const getDefaultAppConfig = (): Record<string, string> | undefined =>\n  getDefaults()?.config;\n\n/**\n * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties\n * prefixed by \"_\")\n * @public\n */\nexport const getExperimentalSetting = <T extends ExperimentalKey>(\n  name: T\n): FirebaseDefaults[`_${T}`] =>\n  getDefaults()?.[`_${name}`] as FirebaseDefaults[`_${T}`];\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Polyfill for `globalThis` object.\n * @returns the `globalThis` object for the given environment.\n * @public\n */\nexport function getGlobal(): typeof globalThis {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  throw new Error('Unable to locate global object.');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  reject: (value?: unknown) => void = () => {};\n  resolve: (value?: unknown) => void = () => {};\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve as (value?: unknown) => void;\n      this.reject = reject as (value?: unknown) => void;\n    });\n  }\n\n  /**\n   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around\n   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback\n   * and returns a node-style callback which will resolve or reject the Deferred's promise.\n   */\n  wrapCallback(\n    callback?: (error?: unknown, value?: unknown) => void\n  ): (error: unknown, value?: unknown) => void {\n    return (error, value?) => {\n      if (error) {\n        this.reject(error);\n      } else {\n        this.resolve(value);\n      }\n      if (typeof callback === 'function') {\n        // Attaching noop handler just in case developer wasn't expecting\n        // promises\n        this.promise.catch(() => {});\n\n        // Some of our callbacks don't expect a value and our own tests\n        // assert that the parameter length is 1\n        if (callback.length === 1) {\n          callback(error);\n        } else {\n          callback(error, value);\n        }\n      }\n    };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSTANTS } from './constants';\nimport { getDefaults } from './defaults';\n\n/**\n * Returns navigator.userAgent string or '' if it's not defined.\n * @return user agent string\n */\nexport function getUA(): string {\n  if (\n    typeof navigator !== 'undefined' &&\n    typeof navigator['userAgent'] === 'string'\n  ) {\n    return navigator['userAgent'];\n  } else {\n    return '';\n  }\n}\n\n/**\n * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.\n *\n * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap\n * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally\n * wait for a callback.\n */\nexport function isMobileCordova(): boolean {\n  return (\n    typeof window !== 'undefined' &&\n    // @ts-ignore Setting up an broadly applicable index signature for Window\n    // just to deal with this case would probably be a bad idea.\n    !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&\n    /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA())\n  );\n}\n\n/**\n * Detect Node.js.\n *\n * @return true if Node.js environment is detected or specified.\n */\n// Node detection logic from: https://github.com/iliakan/detect-node/\nexport function isNode(): boolean {\n  const forceEnvironment = getDefaults()?.forceEnvironment;\n  if (forceEnvironment === 'node') {\n    return true;\n  } else if (forceEnvironment === 'browser') {\n    return false;\n  }\n\n  try {\n    return (\n      Object.prototype.toString.call(global.process) === '[object process]'\n    );\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * Detect Browser Environment\n */\nexport function isBrowser(): boolean {\n  return typeof self === 'object' && self.self === self;\n}\n\n/**\n * Detect browser extensions (Chrome and Firefox at least).\n */\ninterface BrowserRuntime {\n  id?: unknown;\n}\ndeclare const chrome: { runtime?: BrowserRuntime };\ndeclare const browser: { runtime?: BrowserRuntime };\nexport function isBrowserExtension(): boolean {\n  const runtime =\n    typeof chrome === 'object'\n      ? chrome.runtime\n      : typeof browser === 'object'\n      ? browser.runtime\n      : undefined;\n  return typeof runtime === 'object' && runtime.id !== undefined;\n}\n\n/**\n * Detect React Native.\n *\n * @return true if ReactNative environment is detected.\n */\nexport function isReactNative(): boolean {\n  return (\n    typeof navigator === 'object' && navigator['product'] === 'ReactNative'\n  );\n}\n\n/** Detects Electron apps. */\nexport function isElectron(): boolean {\n  return getUA().indexOf('Electron/') >= 0;\n}\n\n/** Detects Internet Explorer. */\nexport function isIE(): boolean {\n  const ua = getUA();\n  return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;\n}\n\n/** Detects Universal Windows Platform apps. */\nexport function isUWP(): boolean {\n  return getUA().indexOf('MSAppHost/') >= 0;\n}\n\n/**\n * Detect whether the current SDK build is the Node version.\n *\n * @return true if it's the Node SDK build.\n */\nexport function isNodeSdk(): boolean {\n  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;\n}\n\n/** Returns true if we are running in Safari. */\nexport function isSafari(): boolean {\n  return (\n    !isNode() &&\n    navigator.userAgent.includes('Safari') &&\n    !navigator.userAgent.includes('Chrome')\n  );\n}\n\n/**\n * This method checks if indexedDB is supported by current browser/service worker context\n * @return true if indexedDB is supported by current browser/service worker context\n */\nexport function isIndexedDBAvailable(): boolean {\n  try {\n    return typeof indexedDB === 'object';\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject\n * if errors occur during the database open operation.\n *\n * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox\n * private browsing)\n */\nexport function validateIndexedDBOpenable(): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      let preExist: boolean = true;\n      const DB_CHECK_NAME =\n        'validate-browser-context-for-indexeddb-analytics-module';\n      const request = self.indexedDB.open(DB_CHECK_NAME);\n      request.onsuccess = () => {\n        request.result.close();\n        // delete database only when it doesn't pre-exist\n        if (!preExist) {\n          self.indexedDB.deleteDatabase(DB_CHECK_NAME);\n        }\n        resolve(true);\n      };\n      request.onupgradeneeded = () => {\n        preExist = false;\n      };\n\n      request.onerror = () => {\n        reject(request.error?.message || '');\n      };\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n *\n * This method checks whether cookie is enabled within current browser\n * @return true if cookie is enabled within current browser\n */\nexport function areCookiesEnabled(): boolean {\n  if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {\n    return false;\n  }\n  return true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Standardized Firebase Error.\n *\n * Usage:\n *\n *   // Typescript string literals for type-safe codes\n *   type Err =\n *     'unknown' |\n *     'object-not-found'\n *     ;\n *\n *   // Closure enum for type-safe error codes\n *   // at-enum {string}\n *   var Err = {\n *     UNKNOWN: 'unknown',\n *     OBJECT_NOT_FOUND: 'object-not-found',\n *   }\n *\n *   let errors: Map<Err, string> = {\n *     'generic-error': \"Unknown error\",\n *     'file-not-found': \"Could not find file: {$file}\",\n *   };\n *\n *   // Type-safe function - must pass a valid error code as param.\n *   let error = new ErrorFactory<Err>('service', 'Service', errors);\n *\n *   ...\n *   throw error.create(Err.GENERIC);\n *   ...\n *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});\n *   ...\n *   // Service: Could not file file: foo.txt (service/file-not-found).\n *\n *   catch (e) {\n *     assert(e.message === \"Could not find file: foo.txt.\");\n *     if ((e as FirebaseError)?.code === 'service/file-not-found') {\n *       console.log(\"Could not read file: \" + e['file']);\n *     }\n *   }\n */\n\nexport type ErrorMap<ErrorCode extends string> = {\n  readonly [K in ErrorCode]: string;\n};\n\nconst ERROR_NAME = 'FirebaseError';\n\nexport interface StringLike {\n  toString(): string;\n}\n\nexport interface ErrorData {\n  [key: string]: unknown;\n}\n\n// Based on code from:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\nexport class FirebaseError extends Error {\n  /** The custom name for all FirebaseErrors. */\n  readonly name: string = ERROR_NAME;\n\n  constructor(\n    /** The error code for this error. */\n    readonly code: string,\n    message: string,\n    /** Custom data for this error. */\n    public customData?: Record<string, unknown>\n  ) {\n    super(message);\n\n    // Fix For ES5\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, FirebaseError.prototype);\n\n    // Maintains proper stack trace for where our error was thrown.\n    // Only available on V8.\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorFactory.prototype.create);\n    }\n  }\n}\n\nexport class ErrorFactory<\n  ErrorCode extends string,\n  ErrorParams extends { readonly [K in ErrorCode]?: ErrorData } = {}\n> {\n  constructor(\n    private readonly service: string,\n    private readonly serviceName: string,\n    private readonly errors: ErrorMap<ErrorCode>\n  ) {}\n\n  create<K extends ErrorCode>(\n    code: K,\n    ...data: K extends keyof ErrorParams ? [ErrorParams[K]] : []\n  ): FirebaseError {\n    const customData = (data[0] as ErrorData) || {};\n    const fullCode = `${this.service}/${code}`;\n    const template = this.errors[code];\n\n    const message = template ? replaceTemplate(template, customData) : 'Error';\n    // Service Name: Error message (service/code).\n    const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;\n\n    const error = new FirebaseError(fullCode, fullMessage, customData);\n\n    return error;\n  }\n}\n\nfunction replaceTemplate(template: string, data: ErrorData): string {\n  return template.replace(PATTERN, (_, key) => {\n    const value = data[key];\n    return value != null ? String(value) : `<${key}?>`;\n  });\n}\n\nconst PATTERN = /\\{\\$([^}]+)}/g;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function contains<T extends object>(obj: T, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexport function safeGet<T extends object, K extends keyof T>(\n  obj: T,\n  key: K\n): T[K] | undefined {\n  if (Object.prototype.hasOwnProperty.call(obj, key)) {\n    return obj[key];\n  } else {\n    return undefined;\n  }\n}\n\nexport function isEmpty(obj: object): obj is {} {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function map<K extends string, V, U>(\n  obj: { [key in K]: V },\n  fn: (value: V, key: K, obj: { [key in K]: V }) => U,\n  contextObj?: unknown\n): { [key in K]: U } {\n  const res: Partial<{ [key in K]: U }> = {};\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      res[key] = fn.call(contextObj, obj[key], key, obj);\n    }\n  }\n  return res as { [key in K]: U };\n}\n\n/**\n * Deep equal two objects. Support Arrays and Objects.\n */\nexport function deepEqual(a: object, b: object): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (const k of aKeys) {\n    if (!bKeys.includes(k)) {\n      return false;\n    }\n\n    const aProp = (a as Record<string, unknown>)[k];\n    const bProp = (b as Record<string, unknown>)[k];\n    if (isObject(aProp) && isObject(bProp)) {\n      if (!deepEqual(aProp, bProp)) {\n        return false;\n      }\n    } else if (aProp !== bProp) {\n      return false;\n    }\n  }\n\n  for (const k of bKeys) {\n    if (!aKeys.includes(k)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(thing: unknown): thing is object {\n  return thing !== null && typeof thing === 'object';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from './assert';\n\n// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they\n// automatically replaced '\\r\\n' with '\\n', and they didn't handle surrogate pairs,\n// so it's been modified.\n\n// Note that not all Unicode characters appear as single characters in JavaScript strings.\n// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters\n// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first\n// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate\n// pair).\n// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3\n\n/**\n * @param {string} str\n * @return {Array}\n */\nexport const stringToByteArray = function (str: string): number[] {\n  const out: number[] = [];\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    let c = str.charCodeAt(i);\n\n    // Is this the lead surrogate in a surrogate pair?\n    if (c >= 0xd800 && c <= 0xdbff) {\n      const high = c - 0xd800; // the high 10 bits.\n      i++;\n      assert(i < str.length, 'Surrogate pair missing trail surrogate.');\n      const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.\n      c = 0x10000 + (high << 10) + low;\n    }\n\n    if (c < 128) {\n      out[p++] = c;\n    } else if (c < 2048) {\n      out[p++] = (c >> 6) | 192;\n      out[p++] = (c & 63) | 128;\n    } else if (c < 65536) {\n      out[p++] = (c >> 12) | 224;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    } else {\n      out[p++] = (c >> 18) | 240;\n      out[p++] = ((c >> 12) & 63) | 128;\n      out[p++] = ((c >> 6) & 63) | 128;\n      out[p++] = (c & 63) | 128;\n    }\n  }\n  return out;\n};\n\n/**\n * Calculate length without actually converting; useful for doing cheaper validation.\n * @param {string} str\n * @return {number}\n */\nexport const stringLength = function (str: string): number {\n  let p = 0;\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charCodeAt(i);\n    if (c < 128) {\n      p++;\n    } else if (c < 2048) {\n      p += 2;\n    } else if (c >= 0xd800 && c <= 0xdbff) {\n      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.\n      p += 4;\n      i++; // skip trail surrogate.\n    } else {\n      p += 3;\n    }\n  }\n  return p;\n};\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The amount of milliseconds to exponentially increase.\n */\nconst DEFAULT_INTERVAL_MILLIS = 1000;\n\n/**\n * The factor to backoff by.\n * Should be a number greater than 1.\n */\nconst DEFAULT_BACKOFF_FACTOR = 2;\n\n/**\n * The maximum milliseconds to increase to.\n *\n * <p>Visible for testing\n */\nexport const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.\n\n/**\n * The percentage of backoff time to randomize by.\n * See\n * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic\n * for context.\n *\n * <p>Visible for testing\n */\nexport const RANDOM_FACTOR = 0.5;\n\n/**\n * Based on the backoff method from\n * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.\n * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.\n */\nexport function calculateBackoffMillis(\n  backoffCount: number,\n  intervalMillis: number = DEFAULT_INTERVAL_MILLIS,\n  backoffFactor: number = DEFAULT_BACKOFF_FACTOR\n): number {\n  // Calculates an exponentially increasing value.\n  // Deviation: calculates value from count and a constant interval, so we only need to save value\n  // and count to restore state.\n  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);\n\n  // A random \"fuzz\" to avoid waves of retries.\n  // Deviation: randomFactor is required.\n  const randomWait = Math.round(\n    // A fraction of the backoff value to add/subtract.\n    // Deviation: changes multiplication order to improve readability.\n    RANDOM_FACTOR *\n      currBaseValue *\n      // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines\n      // if we add or subtract.\n      (Math.random() - 0.5) *\n      2\n  );\n\n  // Limits backoff to max to avoid effectively permanent backoff.\n  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Compat<T> {\n  _delegate: T;\n}\n\nexport function getModularInstance<ExpService>(\n  service: Compat<ExpService> | ExpService\n): ExpService {\n  if (service && (service as Compat<ExpService>)._delegate) {\n    return (service as Compat<ExpService>)._delegate;\n  } else {\n    return service as ExpService;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction));\n        });\n    }\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking)\n            db.addEventListener('versionchange', () => blocking());\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked)\n        request.addEventListener('blocked', () => blocked());\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ComponentContainer,\n  ComponentType,\n  Provider,\n  Name\n} from '@firebase/component';\nimport { PlatformLoggerService, VersionService } from './types';\n\nexport class PlatformLoggerServiceImpl implements PlatformLoggerService {\n  constructor(private readonly container: ComponentContainer) {}\n  // In initial implementation, this will be called by installations on\n  // auth token refresh, and installations will send this string.\n  getPlatformInfoString(): string {\n    const providers = this.container.getProviders();\n    // Loop through providers and get library/version pairs from any that are\n    // version components.\n    return providers\n      .map(provider => {\n        if (isVersionServiceProvider(provider)) {\n          const service = provider.getImmediate() as VersionService;\n          return `${service.library}/${service.version}`;\n        } else {\n          return null;\n        }\n      })\n      .filter(logString => logString)\n      .join(' ');\n  }\n}\n/**\n *\n * @param provider check if this provider provides a VersionService\n *\n * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider\n * provides VersionService. The provider is not necessarily a 'app-version'\n * provider.\n */\nfunction isVersionServiceProvider(provider: Provider<Name>): boolean {\n  const component = provider.getComponent();\n  return component?.type === ComponentType.VERSION;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { name as appName } from '../package.json';\nimport { name as appCompatName } from '../../app-compat/package.json';\nimport { name as analyticsCompatName } from '../../../packages/analytics-compat/package.json';\nimport { name as analyticsName } from '../../../packages/analytics/package.json';\nimport { name as appCheckCompatName } from '../../../packages/app-check-compat/package.json';\nimport { name as appCheckName } from '../../../packages/app-check/package.json';\nimport { name as authName } from '../../../packages/auth/package.json';\nimport { name as authCompatName } from '../../../packages/auth-compat/package.json';\nimport { name as databaseName } from '../../../packages/database/package.json';\nimport { name as databaseCompatName } from '../../../packages/database-compat/package.json';\nimport { name as functionsName } from '../../../packages/functions/package.json';\nimport { name as functionsCompatName } from '../../../packages/functions-compat/package.json';\nimport { name as installationsName } from '../../../packages/installations/package.json';\nimport { name as installationsCompatName } from '../../../packages/installations-compat/package.json';\nimport { name as messagingName } from '../../../packages/messaging/package.json';\nimport { name as messagingCompatName } from '../../../packages/messaging-compat/package.json';\nimport { name as performanceName } from '../../../packages/performance/package.json';\nimport { name as performanceCompatName } from '../../../packages/performance-compat/package.json';\nimport { name as remoteConfigName } from '../../../packages/remote-config/package.json';\nimport { name as remoteConfigCompatName } from '../../../packages/remote-config-compat/package.json';\nimport { name as storageName } from '../../../packages/storage/package.json';\nimport { name as storageCompatName } from '../../../packages/storage-compat/package.json';\nimport { name as firestoreName } from '../../../packages/firestore/package.json';\nimport { name as firestoreCompatName } from '../../../packages/firestore-compat/package.json';\nimport { name as packageName } from '../../../packages/firebase/package.json';\n\n/**\n * The default app name\n *\n * @internal\n */\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport const PLATFORM_LOG_STRING = {\n  [appName]: 'fire-core',\n  [appCompatName]: 'fire-core-compat',\n  [analyticsName]: 'fire-analytics',\n  [analyticsCompatName]: 'fire-analytics-compat',\n  [appCheckName]: 'fire-app-check',\n  [appCheckCompatName]: 'fire-app-check-compat',\n  [authName]: 'fire-auth',\n  [authCompatName]: 'fire-auth-compat',\n  [databaseName]: 'fire-rtdb',\n  [databaseCompatName]: 'fire-rtdb-compat',\n  [functionsName]: 'fire-fn',\n  [functionsCompatName]: 'fire-fn-compat',\n  [installationsName]: 'fire-iid',\n  [installationsCompatName]: 'fire-iid-compat',\n  [messagingName]: 'fire-fcm',\n  [messagingCompatName]: 'fire-fcm-compat',\n  [performanceName]: 'fire-perf',\n  [performanceCompatName]: 'fire-perf-compat',\n  [remoteConfigName]: 'fire-rc',\n  [remoteConfigCompatName]: 'fire-rc-compat',\n  [storageName]: 'fire-gcs',\n  [storageCompatName]: 'fire-gcs-compat',\n  [firestoreName]: 'fire-fst',\n  [firestoreCompatName]: 'fire-fst-compat',\n  'fire-js': 'fire-js', // Platform identifier for JS SDK.\n  [packageName]: 'fire-js-all'\n} as const;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from './public-types';\nimport { Component, Provider, Name } from '@firebase/component';\nimport { logger } from './logger';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { FirebaseAppImpl } from './firebaseApp';\n\n/**\n * @internal\n */\nexport const _apps = new Map<string, FirebaseApp>();\n\n/**\n * Registered components.\n *\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const _components = new Map<string, Component<any>>();\n\n/**\n * @param component - the component being added to this app's container\n *\n * @internal\n */\nexport function _addComponent<T extends Name>(\n  app: FirebaseApp,\n  component: Component<T>\n): void {\n  try {\n    (app as FirebaseAppImpl).container.addComponent(component);\n  } catch (e) {\n    logger.debug(\n      `Component ${component.name} failed to register with FirebaseApp ${app.name}`,\n      e\n    );\n  }\n}\n\n/**\n *\n * @internal\n */\nexport function _addOrOverwriteComponent(\n  app: FirebaseApp,\n  component: Component\n): void {\n  (app as FirebaseAppImpl).container.addOrOverwriteComponent(component);\n}\n\n/**\n *\n * @param component - the component to register\n * @returns whether or not the component is registered successfully\n *\n * @internal\n */\nexport function _registerComponent<T extends Name>(\n  component: Component<T>\n): boolean {\n  const componentName = component.name;\n  if (_components.has(componentName)) {\n    logger.debug(\n      `There were multiple attempts to register component ${componentName}.`\n    );\n\n    return false;\n  }\n\n  _components.set(componentName, component);\n\n  // add the component to existing app instances\n  for (const app of _apps.values()) {\n    _addComponent(app as FirebaseAppImpl, component);\n  }\n\n  return true;\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n *\n * @returns the provider for the service with the matching name\n *\n * @internal\n */\nexport function _getProvider<T extends Name>(\n  app: FirebaseApp,\n  name: T\n): Provider<T> {\n  const heartbeatController = (app as FirebaseAppImpl).container\n    .getProvider('heartbeat')\n    .getImmediate({ optional: true });\n  if (heartbeatController) {\n    void heartbeatController.triggerHeartbeat();\n  }\n  return (app as FirebaseAppImpl).container.getProvider(name);\n}\n\n/**\n *\n * @param app - FirebaseApp instance\n * @param name - service name\n * @param instanceIdentifier - service instance identifier in case the service supports multiple instances\n *\n * @internal\n */\nexport function _removeServiceInstance<T extends Name>(\n  app: FirebaseApp,\n  name: T,\n  instanceIdentifier: string = DEFAULT_ENTRY_NAME\n): void {\n  _getProvider(app, name).clearInstance(instanceIdentifier);\n}\n\n/**\n * Test only\n *\n * @internal\n */\nexport function _clearComponents(): void {\n  _components.clear();\n}\n\n/**\n * Exported in order to be used in app-compat package\n */\nexport { DEFAULT_ENTRY_NAME as _DEFAULT_ENTRY_NAME };\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  BAD_APP_NAME = 'bad-app-name',\n  DUPLICATE_APP = 'duplicate-app',\n  APP_DELETED = 'app-deleted',\n  NO_OPTIONS = 'no-options',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument',\n  INVALID_LOG_ARGUMENT = 'invalid-log-argument',\n  IDB_OPEN = 'idb-open',\n  IDB_GET = 'idb-get',\n  IDB_WRITE = 'idb-set',\n  IDB_DELETE = 'idb-delete'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.BAD_APP_NAME]: \"Illegal App name: '{$appName}\",\n  [AppError.DUPLICATE_APP]:\n    \"Firebase App named '{$appName}' already exists with different options or config\",\n  [AppError.APP_DELETED]: \"Firebase App named '{$appName}' already deleted\",\n  [AppError.NO_OPTIONS]:\n    'Need to provide options, when not being deployed to hosting via source.',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.',\n  [AppError.INVALID_LOG_ARGUMENT]:\n    'First argument to `onLog` must be null or a function.',\n  [AppError.IDB_OPEN]:\n    'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_GET]:\n    'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_WRITE]:\n    'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',\n  [AppError.IDB_DELETE]:\n    'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'\n};\n\ninterface ErrorParams {\n  [AppError.NO_APP]: { appName: string };\n  [AppError.BAD_APP_NAME]: { appName: string };\n  [AppError.DUPLICATE_APP]: { appName: string };\n  [AppError.APP_DELETED]: { appName: string };\n  [AppError.INVALID_APP_ARGUMENT]: { appName: string };\n  [AppError.IDB_OPEN]: { originalErrorMessage?: string };\n  [AppError.IDB_GET]: { originalErrorMessage?: string };\n  [AppError.IDB_WRITE]: { originalErrorMessage?: string };\n  [AppError.IDB_DELETE]: { originalErrorMessage?: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport {\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { ERROR_FACTORY, AppError } from './errors';\n\nexport class FirebaseAppImpl implements FirebaseApp {\n  private readonly _options: FirebaseOptions;\n  private readonly _name: string;\n  /**\n   * Original config values passed in as a constructor parameter.\n   * It is only used to compare with another config object to support idempotent initializeApp().\n   *\n   * Updating automaticDataCollectionEnabled on the App instance will not change its value in _config.\n   */\n  private readonly _config: Required<FirebaseAppSettings>;\n  private _automaticDataCollectionEnabled: boolean;\n  private _isDeleted = false;\n  private readonly _container: ComponentContainer;\n\n  constructor(\n    options: FirebaseOptions,\n    config: Required<FirebaseAppSettings>,\n    container: ComponentContainer\n  ) {\n    this._options = { ...options };\n    this._config = { ...config };\n    this._name = config.name;\n    this._automaticDataCollectionEnabled =\n      config.automaticDataCollectionEnabled;\n    this._container = container;\n    this.container.addComponent(\n      new Component('app', () => this, ComponentType.PUBLIC)\n    );\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    this.checkDestroyed();\n    return this._automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val: boolean) {\n    this.checkDestroyed();\n    this._automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    this.checkDestroyed();\n    return this._name;\n  }\n\n  get options(): FirebaseOptions {\n    this.checkDestroyed();\n    return this._options;\n  }\n\n  get config(): Required<FirebaseAppSettings> {\n    this.checkDestroyed();\n    return this._config;\n  }\n\n  get container(): ComponentContainer {\n    return this._container;\n  }\n\n  get isDeleted(): boolean {\n    return this._isDeleted;\n  }\n\n  set isDeleted(val: boolean) {\n    this._isDeleted = val;\n  }\n\n  /**\n   * This function will throw an Error if the App has already been deleted -\n   * use before performing API actions on the App.\n   */\n  private checkDestroyed(): void {\n    if (this.isDeleted) {\n      throw ERROR_FACTORY.create(AppError.APP_DELETED, { appName: this._name });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  FirebaseAppSettings\n} from './public-types';\nimport { DEFAULT_ENTRY_NAME, PLATFORM_LOG_STRING } from './constants';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport {\n  ComponentContainer,\n  Component,\n  Name,\n  ComponentType\n} from '@firebase/component';\nimport { version } from '../../firebase/package.json';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { _apps, _components, _registerComponent } from './internal';\nimport { logger } from './logger';\nimport {\n  LogLevelString,\n  setLogLevel as setLogLevelImpl,\n  LogCallback,\n  LogOptions,\n  setUserLogHandler\n} from '@firebase/logger';\nimport { deepEqual, getDefaultAppConfig } from '@firebase/util';\n\nexport { FirebaseError } from '@firebase/util';\n\n/**\n * The current SDK version.\n *\n * @public\n */\nexport const SDK_VERSION = version;\n\n/**\n * Creates and initializes a {@link @firebase/app#FirebaseApp} instance.\n *\n * See\n * {@link\n *   https://firebase.google.com/docs/web/setup#add_firebase_to_your_app\n *   | Add Firebase to your app} and\n * {@link\n *   https://firebase.google.com/docs/web/setup#multiple-projects\n *   | Initialize multiple projects} for detailed documentation.\n *\n * @example\n * ```javascript\n *\n * // Initialize default app\n * // Retrieve your own options values by adding a web app on\n * // https://console.firebase.google.com\n * initializeApp({\n *   apiKey: \"AIza....\",                             // Auth / General Use\n *   authDomain: \"YOUR_APP.firebaseapp.com\",         // Auth with popup/redirect\n *   databaseURL: \"https://YOUR_APP.firebaseio.com\", // Realtime Database\n *   storageBucket: \"YOUR_APP.appspot.com\",          // Storage\n *   messagingSenderId: \"123456789\"                  // Cloud Messaging\n * });\n * ```\n *\n * @example\n * ```javascript\n *\n * // Initialize another app\n * const otherApp = initializeApp({\n *   databaseURL: \"https://<OTHER_DATABASE_NAME>.firebaseio.com\",\n *   storageBucket: \"<OTHER_STORAGE_BUCKET>.appspot.com\"\n * }, \"otherApp\");\n * ```\n *\n * @param options - Options to configure the app's services.\n * @param name - Optional name of the app to initialize. If no name\n *   is provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The initialized app.\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  name?: string\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @param options - Options to configure the app's services.\n * @param config - FirebaseApp Configuration\n *\n * @public\n */\nexport function initializeApp(\n  options: FirebaseOptions,\n  config?: FirebaseAppSettings\n): FirebaseApp;\n/**\n * Creates and initializes a FirebaseApp instance.\n *\n * @public\n */\nexport function initializeApp(): FirebaseApp;\nexport function initializeApp(\n  _options?: FirebaseOptions,\n  rawConfig = {}\n): FirebaseApp {\n  let options = _options;\n\n  if (typeof rawConfig !== 'object') {\n    const name = rawConfig;\n    rawConfig = { name };\n  }\n\n  const config: Required<FirebaseAppSettings> = {\n    name: DEFAULT_ENTRY_NAME,\n    automaticDataCollectionEnabled: false,\n    ...rawConfig\n  };\n  const name = config.name;\n\n  if (typeof name !== 'string' || !name) {\n    throw ERROR_FACTORY.create(AppError.BAD_APP_NAME, {\n      appName: String(name)\n    });\n  }\n\n  options ||= getDefaultAppConfig();\n\n  if (!options) {\n    throw ERROR_FACTORY.create(AppError.NO_OPTIONS);\n  }\n\n  const existingApp = _apps.get(name) as FirebaseAppImpl;\n  if (existingApp) {\n    // return the existing app if options and config deep equal the ones in the existing app.\n    if (\n      deepEqual(options, existingApp.options) &&\n      deepEqual(config, existingApp.config)\n    ) {\n      return existingApp;\n    } else {\n      throw ERROR_FACTORY.create(AppError.DUPLICATE_APP, { appName: name });\n    }\n  }\n\n  const container = new ComponentContainer(name);\n  for (const component of _components.values()) {\n    container.addComponent(component);\n  }\n\n  const newApp = new FirebaseAppImpl(options, config, container);\n\n  _apps.set(name, newApp);\n\n  return newApp;\n}\n\n/**\n * Retrieves a {@link @firebase/app#FirebaseApp} instance.\n *\n * When called with no arguments, the default app is returned. When an app name\n * is provided, the app corresponding to that name is returned.\n *\n * An exception is thrown if the app being retrieved has not yet been\n * initialized.\n *\n * @example\n * ```javascript\n * // Return the default app\n * const app = getApp();\n * ```\n *\n * @example\n * ```javascript\n * // Return a named app\n * const otherApp = getApp(\"otherApp\");\n * ```\n *\n * @param name - Optional name of the app to return. If no name is\n *   provided, the default is `\"[DEFAULT]\"`.\n *\n * @returns The app corresponding to the provided app name.\n *   If no app name is provided, the default app is returned.\n *\n * @public\n */\nexport function getApp(name: string = DEFAULT_ENTRY_NAME): FirebaseApp {\n  const app = _apps.get(name);\n  if (!app && name === DEFAULT_ENTRY_NAME) {\n    return initializeApp();\n  }\n  if (!app) {\n    throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n  }\n\n  return app;\n}\n\n/**\n * A (read-only) array of all initialized apps.\n * @public\n */\nexport function getApps(): FirebaseApp[] {\n  return Array.from(_apps.values());\n}\n\n/**\n * Renders this app unusable and frees the resources of all associated\n * services.\n *\n * @example\n * ```javascript\n * deleteApp(app)\n *   .then(function() {\n *     console.log(\"App deleted successfully\");\n *   })\n *   .catch(function(error) {\n *     console.log(\"Error deleting app:\", error);\n *   });\n * ```\n *\n * @public\n */\nexport async function deleteApp(app: FirebaseApp): Promise<void> {\n  const name = app.name;\n  if (_apps.has(name)) {\n    _apps.delete(name);\n    await Promise.all(\n      (app as FirebaseAppImpl).container\n        .getProviders()\n        .map(provider => provider.delete())\n    );\n    (app as FirebaseAppImpl).isDeleted = true;\n  }\n}\n\n/**\n * Registers a library's name and version for platform logging purposes.\n * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)\n * @param version - Current version of that library.\n * @param variant - Bundle variant, e.g., node, rn, etc.\n *\n * @public\n */\nexport function registerVersion(\n  libraryKeyOrName: string,\n  version: string,\n  variant?: string\n): void {\n  // TODO: We can use this check to whitelist strings when/if we set up\n  // a good whitelist system.\n  let library = PLATFORM_LOG_STRING[libraryKeyOrName] ?? libraryKeyOrName;\n  if (variant) {\n    library += `-${variant}`;\n  }\n  const libraryMismatch = library.match(/\\s|\\//);\n  const versionMismatch = version.match(/\\s|\\//);\n  if (libraryMismatch || versionMismatch) {\n    const warning = [\n      `Unable to register library \"${library}\" with version \"${version}\":`\n    ];\n    if (libraryMismatch) {\n      warning.push(\n        `library name \"${library}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    if (libraryMismatch && versionMismatch) {\n      warning.push('and');\n    }\n    if (versionMismatch) {\n      warning.push(\n        `version name \"${version}\" contains illegal characters (whitespace or \"/\")`\n      );\n    }\n    logger.warn(warning.join(' '));\n    return;\n  }\n  _registerComponent(\n    new Component(\n      `${library}-version` as Name,\n      () => ({ library, version }),\n      ComponentType.VERSION\n    )\n  );\n}\n\n/**\n * Sets log handler for all Firebase SDKs.\n * @param logCallback - An optional custom log handler that executes user code whenever\n * the Firebase SDK makes a logging call.\n *\n * @public\n */\nexport function onLog(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  if (logCallback !== null && typeof logCallback !== 'function') {\n    throw ERROR_FACTORY.create(AppError.INVALID_LOG_ARGUMENT);\n  }\n  setUserLogHandler(logCallback, options);\n}\n\n/**\n * Sets log level for all Firebase SDKs.\n *\n * All of the log types above the current log level are captured (i.e. if\n * you set the log level to `info`, errors are logged, but `debug` and\n * `verbose` logs are not).\n *\n * @public\n */\nexport function setLogLevel(logLevel: LogLevelString): void {\n  setLogLevelImpl(logLevel);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { DBSchema, openDB, IDBPDatabase } from 'idb';\nimport { AppError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from './public-types';\nimport { HeartbeatsInIndexedDB } from './types';\nimport { logger } from './logger';\n\nconst DB_NAME = 'firebase-heartbeat-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-heartbeat-store';\n\ninterface AppDB extends DBSchema {\n  'firebase-heartbeat-store': {\n    key: string;\n    value: HeartbeatsInIndexedDB;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<AppDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<AppDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB<AppDB>(DB_NAME, DB_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME);\n        }\n      }\n    }).catch(e => {\n      throw ERROR_FACTORY.create(AppError.IDB_OPEN, {\n        originalErrorMessage: e.message\n      });\n    });\n  }\n  return dbPromise;\n}\n\nexport async function readHeartbeatsFromIndexedDB(\n  app: FirebaseApp\n): Promise<HeartbeatsInIndexedDB | undefined> {\n  try {\n    const db = await getDbPromise();\n    return db\n      .transaction(STORE_NAME)\n      .objectStore(STORE_NAME)\n      .get(computeKey(app)) as Promise<HeartbeatsInIndexedDB | undefined>;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_GET, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nexport async function writeHeartbeatsToIndexedDB(\n  app: FirebaseApp,\n  heartbeatObject: HeartbeatsInIndexedDB\n): Promise<void> {\n  try {\n    const db = await getDbPromise();\n    const tx = db.transaction(STORE_NAME, 'readwrite');\n    const objectStore = tx.objectStore(STORE_NAME);\n    await objectStore.put(heartbeatObject, computeKey(app));\n    return tx.done;\n  } catch (e) {\n    if (e instanceof FirebaseError) {\n      logger.warn(e.message);\n    } else {\n      const idbGetError = ERROR_FACTORY.create(AppError.IDB_WRITE, {\n        originalErrorMessage: (e as Error)?.message\n      });\n      logger.warn(idbGetError.message);\n    }\n  }\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.name}!${app.options.appId}`;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ComponentContainer } from '@firebase/component';\nimport {\n  base64urlEncodeWithoutPadding,\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport {\n  readHeartbeatsFromIndexedDB,\n  writeHeartbeatsToIndexedDB\n} from './indexeddb';\nimport { FirebaseApp } from './public-types';\nimport {\n  HeartbeatsByUserAgent,\n  HeartbeatService,\n  HeartbeatsInIndexedDB,\n  HeartbeatStorage,\n  SingleDateHeartbeat\n} from './types';\n\nconst MAX_HEADER_BYTES = 1024;\n// 30 days\nconst STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;\n\nexport class HeartbeatServiceImpl implements HeartbeatService {\n  /**\n   * The persistence layer for heartbeats\n   * Leave public for easier testing.\n   */\n  _storage: HeartbeatStorageImpl;\n\n  /**\n   * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate\n   * the header string.\n   * Stores one record per date. This will be consolidated into the standard\n   * format of one record per user agent string before being sent as a header.\n   * Populated from indexedDB when the controller is instantiated and should\n   * be kept in sync with indexedDB.\n   * Leave public for easier testing.\n   */\n  _heartbeatsCache: HeartbeatsInIndexedDB | null = null;\n\n  /**\n   * the initialization promise for populating heartbeatCache.\n   * If getHeartbeatsHeader() is called before the promise resolves\n   * (hearbeatsCache == null), it should wait for this promise\n   * Leave public for easier testing.\n   */\n  _heartbeatsCachePromise: Promise<HeartbeatsInIndexedDB>;\n  constructor(private readonly container: ComponentContainer) {\n    const app = this.container.getProvider('app').getImmediate();\n    this._storage = new HeartbeatStorageImpl(app);\n    this._heartbeatsCachePromise = this._storage.read().then(result => {\n      this._heartbeatsCache = result;\n      return result;\n    });\n  }\n\n  /**\n   * Called to report a heartbeat. The function will generate\n   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it\n   * to IndexedDB.\n   * Note that we only store one heartbeat per day. So if a heartbeat for today is\n   * already logged, subsequent calls to this function in the same day will be ignored.\n   */\n  async triggerHeartbeat(): Promise<void> {\n    const platformLogger = this.container\n      .getProvider('platform-logger')\n      .getImmediate();\n\n    // This is the \"Firebase user agent\" string from the platform logger\n    // service, not the browser user agent.\n    const agent = platformLogger.getPlatformInfoString();\n    const date = getUTCDateString();\n    if (this._heartbeatsCache === null) {\n      this._heartbeatsCache = await this._heartbeatsCachePromise;\n    }\n    // Do not store a heartbeat if one is already stored for this day\n    // or if a header has already been sent today.\n    if (\n      this._heartbeatsCache.lastSentHeartbeatDate === date ||\n      this._heartbeatsCache.heartbeats.some(\n        singleDateHeartbeat => singleDateHeartbeat.date === date\n      )\n    ) {\n      return;\n    } else {\n      // There is no entry for this date. Create one.\n      this._heartbeatsCache.heartbeats.push({ date, agent });\n    }\n    // Remove entries older than 30 days.\n    this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(\n      singleDateHeartbeat => {\n        const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();\n        const now = Date.now();\n        return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;\n      }\n    );\n    return this._storage.overwrite(this._heartbeatsCache);\n  }\n\n  /**\n   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.\n   * It also clears all heartbeats from memory as well as in IndexedDB.\n   *\n   * NOTE: Consuming product SDKs should not send the header if this method\n   * returns an empty string.\n   */\n  async getHeartbeatsHeader(): Promise<string> {\n    if (this._heartbeatsCache === null) {\n      await this._heartbeatsCachePromise;\n    }\n    // If it's still null or the array is empty, there is no data to send.\n    if (\n      this._heartbeatsCache === null ||\n      this._heartbeatsCache.heartbeats.length === 0\n    ) {\n      return '';\n    }\n    const date = getUTCDateString();\n    // Extract as many heartbeats from the cache as will fit under the size limit.\n    const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(\n      this._heartbeatsCache.heartbeats\n    );\n    const headerString = base64urlEncodeWithoutPadding(\n      JSON.stringify({ version: 2, heartbeats: heartbeatsToSend })\n    );\n    // Store last sent date to prevent another being logged/sent for the same day.\n    this._heartbeatsCache.lastSentHeartbeatDate = date;\n    if (unsentEntries.length > 0) {\n      // Store any unsent entries if they exist.\n      this._heartbeatsCache.heartbeats = unsentEntries;\n      // This seems more likely than emptying the array (below) to lead to some odd state\n      // since the cache isn't empty and this will be called again on the next request,\n      // and is probably safest if we await it.\n      await this._storage.overwrite(this._heartbeatsCache);\n    } else {\n      this._heartbeatsCache.heartbeats = [];\n      // Do not wait for this, to reduce latency.\n      void this._storage.overwrite(this._heartbeatsCache);\n    }\n    return headerString;\n  }\n}\n\nfunction getUTCDateString(): string {\n  const today = new Date();\n  // Returns date format 'YYYY-MM-DD'\n  return today.toISOString().substring(0, 10);\n}\n\nexport function extractHeartbeatsForHeader(\n  heartbeatsCache: SingleDateHeartbeat[],\n  maxSize = MAX_HEADER_BYTES\n): {\n  heartbeatsToSend: HeartbeatsByUserAgent[];\n  unsentEntries: SingleDateHeartbeat[];\n} {\n  // Heartbeats grouped by user agent in the standard format to be sent in\n  // the header.\n  const heartbeatsToSend: HeartbeatsByUserAgent[] = [];\n  // Single date format heartbeats that are not sent.\n  let unsentEntries = heartbeatsCache.slice();\n  for (const singleDateHeartbeat of heartbeatsCache) {\n    // Look for an existing entry with the same user agent.\n    const heartbeatEntry = heartbeatsToSend.find(\n      hb => hb.agent === singleDateHeartbeat.agent\n    );\n    if (!heartbeatEntry) {\n      // If no entry for this user agent exists, create one.\n      heartbeatsToSend.push({\n        agent: singleDateHeartbeat.agent,\n        dates: [singleDateHeartbeat.date]\n      });\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        // If the header would exceed max size, remove the added heartbeat\n        // entry and stop adding to the header.\n        heartbeatsToSend.pop();\n        break;\n      }\n    } else {\n      heartbeatEntry.dates.push(singleDateHeartbeat.date);\n      // If the header would exceed max size, remove the added date\n      // and stop adding to the header.\n      if (countBytes(heartbeatsToSend) > maxSize) {\n        heartbeatEntry.dates.pop();\n        break;\n      }\n    }\n    // Pop unsent entry from queue. (Skipped if adding the entry exceeded\n    // quota and the loop breaks early.)\n    unsentEntries = unsentEntries.slice(1);\n  }\n  return {\n    heartbeatsToSend,\n    unsentEntries\n  };\n}\n\nexport class HeartbeatStorageImpl implements HeartbeatStorage {\n  private _canUseIndexedDBPromise: Promise<boolean>;\n  constructor(public app: FirebaseApp) {\n    this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();\n  }\n  async runIndexedDBEnvironmentCheck(): Promise<boolean> {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    } else {\n      return validateIndexedDBOpenable()\n        .then(() => true)\n        .catch(() => false);\n    }\n  }\n  /**\n   * Read all heartbeats.\n   */\n  async read(): Promise<HeartbeatsInIndexedDB> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return { heartbeats: [] };\n    } else {\n      const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);\n      return idbHeartbeatObject || { heartbeats: [] };\n    }\n  }\n  // overwrite the storage with the provided heartbeats\n  async overwrite(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: heartbeatsObject.heartbeats\n      });\n    }\n  }\n  // add heartbeats\n  async add(heartbeatsObject: HeartbeatsInIndexedDB): Promise<void> {\n    const canUseIndexedDB = await this._canUseIndexedDBPromise;\n    if (!canUseIndexedDB) {\n      return;\n    } else {\n      const existingHeartbeatsObject = await this.read();\n      return writeHeartbeatsToIndexedDB(this.app, {\n        lastSentHeartbeatDate:\n          heartbeatsObject.lastSentHeartbeatDate ??\n          existingHeartbeatsObject.lastSentHeartbeatDate,\n        heartbeats: [\n          ...existingHeartbeatsObject.heartbeats,\n          ...heartbeatsObject.heartbeats\n        ]\n      });\n    }\n  }\n}\n\n/**\n * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped\n * in a platform logging header JSON object, stringified, and converted\n * to base 64.\n */\nexport function countBytes(heartbeatsCache: HeartbeatsByUserAgent[]): number {\n  // base64 has a restricted set of characters, all of which should be 1 byte.\n  return base64urlEncodeWithoutPadding(\n    // heartbeatsCache wrapper properties\n    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })\n  ).length;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Component, ComponentType } from '@firebase/component';\nimport { PlatformLoggerServiceImpl } from './platformLoggerService';\nimport { name, version } from '../package.json';\nimport { _registerComponent } from './internal';\nimport { registerVersion } from './api';\nimport { HeartbeatServiceImpl } from './heartbeatService';\n\nexport function registerCoreComponents(variant?: string): void {\n  _registerComponent(\n    new Component(\n      'platform-logger',\n      container => new PlatformLoggerServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n  _registerComponent(\n    new Component(\n      'heartbeat',\n      container => new HeartbeatServiceImpl(container),\n      ComponentType.PRIVATE\n    )\n  );\n\n  // Register `app` package.\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n  // Register platform SDK identifier (no version).\n  registerVersion('fire-js', '');\n}\n","/**\n * Firebase App\n *\n * @remarks This package coordinates the communication between the different Firebase components\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerCoreComponents } from './registerCoreComponents';\n\nexport * from './api';\nexport * from './internal';\nexport * from './public-types';\n\nregisterCoreComponents('__RUNTIME_ENV__');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nregisterVersion(name, version, 'app');\nexport * from '@firebase/app';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../../package.json';\n\nexport const PENDING_TIMEOUT_MS = 10000;\n\nexport const PACKAGE_VERSION = `w:${version}`;\nexport const INTERNAL_AUTH_VERSION = 'FIS_v2';\n\nexport const INSTALLATIONS_API_URL =\n  'https://firebaseinstallations.googleapis.com/v1';\n\nexport const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour\n\nexport const SERVICE = 'installations';\nexport const SERVICE_NAME = 'Installations';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from './constants';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  NOT_REGISTERED = 'not-registered',\n  INSTALLATION_NOT_FOUND = 'installation-not-found',\n  REQUEST_FAILED = 'request-failed',\n  APP_OFFLINE = 'app-offline',\n  DELETE_PENDING_REGISTRATION = 'delete-pending-registration'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.NOT_REGISTERED]: 'Firebase Installation is not registered.',\n  [ErrorCode.INSTALLATION_NOT_FOUND]: 'Firebase Installation not found.',\n  [ErrorCode.REQUEST_FAILED]:\n    '{$requestName} request failed with error \"{$serverCode} {$serverStatus}: {$serverMessage}\"',\n  [ErrorCode.APP_OFFLINE]: 'Could not process request. Application offline.',\n  [ErrorCode.DELETE_PENDING_REGISTRATION]:\n    \"Can't delete installation while there is a pending registration request.\"\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.REQUEST_FAILED]: {\n    requestName: string;\n    [index: string]: string | number; // to make Typescript 3.8 happy\n  } & ServerErrorData;\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n\nexport interface ServerErrorData {\n  serverCode: number;\n  serverMessage: string;\n  serverStatus: string;\n}\n\nexport type ServerError = FirebaseError & { customData: ServerErrorData };\n\n/** Returns true if error is a FirebaseError that is based on an error from the server. */\nexport function isServerError(error: unknown): error is ServerError {\n  return (\n    error instanceof FirebaseError &&\n    error.code.includes(ErrorCode.REQUEST_FAILED)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport {\n  INSTALLATIONS_API_URL,\n  INTERNAL_AUTH_VERSION\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { AppConfig } from '../interfaces/installation-impl';\n\nexport function getInstallationsEndpoint({ projectId }: AppConfig): string {\n  return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;\n}\n\nexport function extractAuthTokenInfoFromResponse(\n  response: GenerateAuthTokenResponse\n): CompletedAuthToken {\n  return {\n    token: response.token,\n    requestStatus: RequestStatus.COMPLETED,\n    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),\n    creationTime: Date.now()\n  };\n}\n\nexport async function getErrorFromResponse(\n  requestName: string,\n  response: Response\n): Promise<FirebaseError> {\n  const responseJson: ErrorResponse = await response.json();\n  const errorData = responseJson.error;\n  return ERROR_FACTORY.create(ErrorCode.REQUEST_FAILED, {\n    requestName,\n    serverCode: errorData.code,\n    serverMessage: errorData.message,\n    serverStatus: errorData.status\n  });\n}\n\nexport function getHeaders({ apiKey }: AppConfig): Headers {\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\nexport function getHeadersWithAuth(\n  appConfig: AppConfig,\n  { refreshToken }: RegisteredInstallationEntry\n): Headers {\n  const headers = getHeaders(appConfig);\n  headers.append('Authorization', getAuthorizationHeader(refreshToken));\n  return headers;\n}\n\nexport interface ErrorResponse {\n  error: {\n    code: number;\n    message: string;\n    status: string;\n  };\n}\n\n/**\n * Calls the passed in fetch wrapper and returns the response.\n * If the returned response has a status of 5xx, re-runs the function once and\n * returns the response.\n */\nexport async function retryIfServerError(\n  fn: () => Promise<Response>\n): Promise<Response> {\n  const result = await fn();\n\n  if (result.status >= 500 && result.status < 600) {\n    // Internal Server Error. Retry request.\n    return fn();\n  }\n\n  return result;\n}\n\nfunction getExpiresInFromResponseExpiresIn(responseExpiresIn: string): number {\n  // This works because the server will never respond with fractions of a second.\n  return Number(responseExpiresIn.replace('s', '000'));\n}\n\nfunction getAuthorizationHeader(refreshToken: string): string {\n  return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bufferToBase64UrlSafe } from './buffer-to-base64-url-safe';\n\nexport const VALID_FID_PATTERN = /^[cdef][\\w-]{21}$/;\nexport const INVALID_FID = '';\n\n/**\n * Generates a new FID using random values from Web Crypto API.\n * Returns an empty string if FID generation fails for any reason.\n */\nexport function generateFid(): string {\n  try {\n    // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5\n    // bytes. our implementation generates a 17 byte array instead.\n    const fidByteArray = new Uint8Array(17);\n    const crypto =\n      self.crypto || (self as unknown as { msCrypto: Crypto }).msCrypto;\n    crypto.getRandomValues(fidByteArray);\n\n    // Replace the first 4 random bits with the constant FID header of 0b0111.\n    fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);\n\n    const fid = encode(fidByteArray);\n\n    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;\n  } catch {\n    // FID generation errored\n    return INVALID_FID;\n  }\n}\n\n/** Converts a FID Uint8Array to a base64 string representation. */\nfunction encode(fidByteArray: Uint8Array): string {\n  const b64String = bufferToBase64UrlSafe(fidByteArray);\n\n  // Remove the 23rd character that was added because of the extra 4 bits at the\n  // end of our 17 byte array, and the '=' padding.\n  return b64String.substr(0, 22);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function bufferToBase64UrlSafe(array: Uint8Array): string {\n  const b64 = btoa(String.fromCharCode(...array));\n  return b64.replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppConfig } from '../interfaces/installation-impl';\n\n/** Returns a string key that can be used to identify the app. */\nexport function getKey(appConfig: AppConfig): string {\n  return `${appConfig.appName}!${appConfig.appId}`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getKey } from '../util/get-key';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { IdChangeCallbackFn } from '../api';\n\nconst fidChangeCallbacks: Map<string, Set<IdChangeCallbackFn>> = new Map();\n\n/**\n * Calls the onIdChange callbacks with the new FID value, and broadcasts the\n * change to other tabs.\n */\nexport function fidChanged(appConfig: AppConfig, fid: string): void {\n  const key = getKey(appConfig);\n\n  callFidChangeCallbacks(key, fid);\n  broadcastFidChange(key, fid);\n}\n\nexport function addCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  // Open the broadcast channel if it's not already open,\n  // to be able to listen to change events from other tabs.\n  getBroadcastChannel();\n\n  const key = getKey(appConfig);\n\n  let callbackSet = fidChangeCallbacks.get(key);\n  if (!callbackSet) {\n    callbackSet = new Set();\n    fidChangeCallbacks.set(key, callbackSet);\n  }\n  callbackSet.add(callback);\n}\n\nexport function removeCallback(\n  appConfig: AppConfig,\n  callback: IdChangeCallbackFn\n): void {\n  const key = getKey(appConfig);\n\n  const callbackSet = fidChangeCallbacks.get(key);\n\n  if (!callbackSet) {\n    return;\n  }\n\n  callbackSet.delete(callback);\n  if (callbackSet.size === 0) {\n    fidChangeCallbacks.delete(key);\n  }\n\n  // Close broadcast channel if there are no more callbacks.\n  closeBroadcastChannel();\n}\n\nfunction callFidChangeCallbacks(key: string, fid: string): void {\n  const callbacks = fidChangeCallbacks.get(key);\n  if (!callbacks) {\n    return;\n  }\n\n  for (const callback of callbacks) {\n    callback(fid);\n  }\n}\n\nfunction broadcastFidChange(key: string, fid: string): void {\n  const channel = getBroadcastChannel();\n  if (channel) {\n    channel.postMessage({ key, fid });\n  }\n  closeBroadcastChannel();\n}\n\nlet broadcastChannel: BroadcastChannel | null = null;\n/** Opens and returns a BroadcastChannel if it is supported by the browser. */\nfunction getBroadcastChannel(): BroadcastChannel | null {\n  if (!broadcastChannel && 'BroadcastChannel' in self) {\n    broadcastChannel = new BroadcastChannel('[Firebase] FID Change');\n    broadcastChannel.onmessage = e => {\n      callFidChangeCallbacks(e.data.key, e.data.fid);\n    };\n  }\n  return broadcastChannel;\n}\n\nfunction closeBroadcastChannel(): void {\n  if (fidChangeCallbacks.size === 0 && broadcastChannel) {\n    broadcastChannel.close();\n    broadcastChannel = null;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DBSchema, IDBPDatabase, openDB } from 'idb';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { InstallationEntry } from '../interfaces/installation-entry';\nimport { getKey } from '../util/get-key';\nimport { fidChanged } from './fid-changed';\n\nconst DATABASE_NAME = 'firebase-installations-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-installations-store';\n\ninterface InstallationsDB extends DBSchema {\n  'firebase-installations-store': {\n    key: string;\n    value: InstallationEntry | undefined;\n  };\n}\n\nlet dbPromise: Promise<IDBPDatabase<InstallationsDB>> | null = null;\nfunction getDbPromise(): Promise<IDBPDatabase<InstallationsDB>> {\n  if (!dbPromise) {\n    dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\n      upgrade: (db, oldVersion) => {\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (oldVersion) {\n          case 0:\n            db.createObjectStore(OBJECT_STORE_NAME);\n        }\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function get(\n  appConfig: AppConfig\n): Promise<InstallationEntry | undefined> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  return db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key) as Promise<InstallationEntry>;\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function set<ValueType extends InstallationEntry>(\n  appConfig: AppConfig,\n  value: ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const objectStore = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue = (await objectStore.get(key)) as InstallationEntry;\n  await objectStore.put(value, key);\n  await tx.done;\n\n  if (!oldValue || oldValue.fid !== value.fid) {\n    fidChanged(appConfig, value.fid);\n  }\n\n  return value;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function remove(appConfig: AppConfig): Promise<void> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.done;\n}\n\n/**\n * Atomically updates a record with the result of updateFn, which gets\n * called with the current value. If newValue is undefined, the record is\n * deleted instead.\n * @return Updated value\n */\nexport async function update<ValueType extends InstallationEntry | undefined>(\n  appConfig: AppConfig,\n  updateFn: (previousValue: InstallationEntry | undefined) => ValueType\n): Promise<ValueType> {\n  const key = getKey(appConfig);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  const store = tx.objectStore(OBJECT_STORE_NAME);\n  const oldValue: InstallationEntry | undefined = (await store.get(\n    key\n  )) as InstallationEntry;\n  const newValue = updateFn(oldValue);\n\n  if (newValue === undefined) {\n    await store.delete(key);\n  } else {\n    await store.put(newValue, key);\n  }\n  await tx.done;\n\n  if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {\n    fidChanged(appConfig, newValue.fid);\n  }\n\n  return newValue;\n}\n\nexport async function clear(): Promise<void> {\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).clear();\n  await tx.done;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createInstallationRequest } from '../functions/create-installation-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  InProgressInstallationEntry,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { generateFid, INVALID_FID } from './generate-fid';\nimport { remove, set, update } from './idb-manager';\n\nexport interface InstallationEntryWithRegistrationPromise {\n  installationEntry: InstallationEntry;\n  /** Exist iff the installationEntry is not registered. */\n  registrationPromise?: Promise<RegisteredInstallationEntry>;\n}\n\n/**\n * Updates and returns the InstallationEntry from the database.\n * Also triggers a registration request if it is necessary and possible.\n */\nexport async function getInstallationEntry(\n  installations: FirebaseInstallationsImpl\n): Promise<InstallationEntryWithRegistrationPromise> {\n  let registrationPromise: Promise<RegisteredInstallationEntry> | undefined;\n\n  const installationEntry = await update(installations.appConfig, oldEntry => {\n    const installationEntry = updateOrCreateInstallationEntry(oldEntry);\n    const entryWithPromise = triggerRegistrationIfNecessary(\n      installations,\n      installationEntry\n    );\n    registrationPromise = entryWithPromise.registrationPromise;\n    return entryWithPromise.installationEntry;\n  });\n\n  if (installationEntry.fid === INVALID_FID) {\n    // FID generation failed. Waiting for the FID from the server.\n    return { installationEntry: await registrationPromise! };\n  }\n\n  return {\n    installationEntry,\n    registrationPromise\n  };\n}\n\n/**\n * Creates a new Installation Entry if one does not exist.\n * Also clears timed out pending requests.\n */\nfunction updateOrCreateInstallationEntry(\n  oldEntry: InstallationEntry | undefined\n): InstallationEntry {\n  const entry: InstallationEntry = oldEntry || {\n    fid: generateFid(),\n    registrationStatus: RequestStatus.NOT_STARTED\n  };\n\n  return clearTimedOutRequest(entry);\n}\n\n/**\n * If the Firebase Installation is not registered yet, this will trigger the\n * registration and return an InProgressInstallationEntry.\n *\n * If registrationPromise does not exist, the installationEntry is guaranteed\n * to be registered.\n */\nfunction triggerRegistrationIfNecessary(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InstallationEntry\n): InstallationEntryWithRegistrationPromise {\n  if (installationEntry.registrationStatus === RequestStatus.NOT_STARTED) {\n    if (!navigator.onLine) {\n      // Registration required but app is offline.\n      const registrationPromiseWithError = Promise.reject(\n        ERROR_FACTORY.create(ErrorCode.APP_OFFLINE)\n      );\n      return {\n        installationEntry,\n        registrationPromise: registrationPromiseWithError\n      };\n    }\n\n    // Try registering. Change status to IN_PROGRESS.\n    const inProgressEntry: InProgressInstallationEntry = {\n      fid: installationEntry.fid,\n      registrationStatus: RequestStatus.IN_PROGRESS,\n      registrationTime: Date.now()\n    };\n    const registrationPromise = registerInstallation(\n      installations,\n      inProgressEntry\n    );\n    return { installationEntry: inProgressEntry, registrationPromise };\n  } else if (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS\n  ) {\n    return {\n      installationEntry,\n      registrationPromise: waitUntilFidRegistration(installations)\n    };\n  } else {\n    return { installationEntry };\n  }\n}\n\n/** This will be executed only once for each new Firebase Installation. */\nasync function registerInstallation(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  try {\n    const registeredInstallationEntry = await createInstallationRequest(\n      installations,\n      installationEntry\n    );\n    return set(installations.appConfig, registeredInstallationEntry);\n  } catch (e) {\n    if (isServerError(e) && e.customData.serverCode === 409) {\n      // Server returned a \"FID can not be used\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      // Registration failed. Set FID as not registered.\n      await set(installations.appConfig, {\n        fid: installationEntry.fid,\n        registrationStatus: RequestStatus.NOT_STARTED\n      });\n    }\n    throw e;\n  }\n}\n\n/** Call if FID registration is pending in another request. */\nasync function waitUntilFidRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<RegisteredInstallationEntry> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry: InstallationEntry = await updateInstallationRequest(\n    installations.appConfig\n  );\n  while (entry.registrationStatus === RequestStatus.IN_PROGRESS) {\n    // createInstallation request still in progress.\n    await sleep(100);\n\n    entry = await updateInstallationRequest(installations.appConfig);\n  }\n\n  if (entry.registrationStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    const { installationEntry, registrationPromise } =\n      await getInstallationEntry(installations);\n\n    if (registrationPromise) {\n      return registrationPromise;\n    } else {\n      // if there is no registrationPromise, entry is registered.\n      return installationEntry as RegisteredInstallationEntry;\n    }\n  }\n\n  return entry;\n}\n\n/**\n * Called only if there is a CreateInstallation request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * CreateInstallation request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateInstallationRequest(\n  appConfig: AppConfig\n): Promise<InstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!oldEntry) {\n      throw ERROR_FACTORY.create(ErrorCode.INSTALLATION_NOT_FOUND);\n    }\n    return clearTimedOutRequest(oldEntry);\n  });\n}\n\nfunction clearTimedOutRequest(entry: InstallationEntry): InstallationEntry {\n  if (hasInstallationRequestTimedOut(entry)) {\n    return {\n      fid: entry.fid,\n      registrationStatus: RequestStatus.NOT_STARTED\n    };\n  }\n\n  return entry;\n}\n\nfunction hasInstallationRequestTimedOut(\n  installationEntry: InstallationEntry\n): boolean {\n  return (\n    installationEntry.registrationStatus === RequestStatus.IN_PROGRESS &&\n    installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CreateInstallationResponse } from '../interfaces/api-response';\nimport {\n  InProgressInstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { INTERNAL_AUTH_VERSION, PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeaders,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\n\nexport async function createInstallationRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  { fid }: InProgressInstallationEntry\n): Promise<RegisteredInstallationEntry> {\n  const endpoint = getInstallationsEndpoint(appConfig);\n\n  const headers = getHeaders(appConfig);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    fid,\n    authVersion: INTERNAL_AUTH_VERSION,\n    appId: appConfig.appId,\n    sdkVersion: PACKAGE_VERSION\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: CreateInstallationResponse = await response.json();\n    const registeredInstallationEntry: RegisteredInstallationEntry = {\n      fid: responseValue.fid || fid,\n      registrationStatus: RequestStatus.COMPLETED,\n      refreshToken: responseValue.refreshToken,\n      authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)\n    };\n    return registeredInstallationEntry;\n  } else {\n    throw await getErrorFromResponse('Create Installation', response);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GenerateAuthTokenResponse } from '../interfaces/api-response';\nimport {\n  CompletedAuthToken,\n  RegisteredInstallationEntry\n} from '../interfaces/installation-entry';\nimport { PACKAGE_VERSION } from '../util/constants';\nimport {\n  extractAuthTokenInfoFromResponse,\n  getErrorFromResponse,\n  getHeadersWithAuth,\n  getInstallationsEndpoint,\n  retryIfServerError\n} from './common';\nimport {\n  FirebaseInstallationsImpl,\n  AppConfig\n} from '../interfaces/installation-impl';\n\nexport async function generateAuthTokenRequest(\n  { appConfig, heartbeatServiceProvider }: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);\n\n  const headers = getHeadersWithAuth(appConfig, installationEntry);\n\n  // If heartbeat service exists, add the heartbeat string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers.append('x-firebase-client', heartbeatsHeader);\n    }\n  }\n\n  const body = {\n    installation: {\n      sdkVersion: PACKAGE_VERSION,\n      appId: appConfig.appId\n    }\n  };\n\n  const request: RequestInit = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  const response = await retryIfServerError(() => fetch(endpoint, request));\n  if (response.ok) {\n    const responseValue: GenerateAuthTokenResponse = await response.json();\n    const completedAuthToken: CompletedAuthToken =\n      extractAuthTokenInfoFromResponse(responseValue);\n    return completedAuthToken;\n  } else {\n    throw await getErrorFromResponse('Generate Auth Token', response);\n  }\n}\n\nfunction getGenerateAuthTokenEndpoint(\n  appConfig: AppConfig,\n  { fid }: RegisteredInstallationEntry\n): string {\n  return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { generateAuthTokenRequest } from '../functions/generate-auth-token-request';\nimport {\n  AppConfig,\n  FirebaseInstallationsImpl\n} from '../interfaces/installation-impl';\nimport {\n  AuthToken,\n  CompletedAuthToken,\n  InProgressAuthToken,\n  InstallationEntry,\n  RegisteredInstallationEntry,\n  RequestStatus\n} from '../interfaces/installation-entry';\nimport { PENDING_TIMEOUT_MS, TOKEN_EXPIRATION_BUFFER } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode, isServerError } from '../util/errors';\nimport { sleep } from '../util/sleep';\nimport { remove, set, update } from './idb-manager';\n\n/**\n * Returns a valid authentication token for the installation. Generates a new\n * token if one doesn't exist, is expired or about to expire.\n *\n * Should only be called if the Firebase Installation is registered.\n */\nexport async function refreshAuthToken(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh = false\n): Promise<CompletedAuthToken> {\n  let tokenPromise: Promise<CompletedAuthToken> | undefined;\n  const entry = await update(installations.appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {\n      // There is a valid token in the DB.\n      return oldEntry;\n    } else if (oldAuthToken.requestStatus === RequestStatus.IN_PROGRESS) {\n      // There already is a token request in progress.\n      tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);\n      return oldEntry;\n    } else {\n      // No token or token expired.\n      if (!navigator.onLine) {\n        throw ERROR_FACTORY.create(ErrorCode.APP_OFFLINE);\n      }\n\n      const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);\n      tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);\n      return inProgressEntry;\n    }\n  });\n\n  const authToken = tokenPromise\n    ? await tokenPromise\n    : (entry.authToken as CompletedAuthToken);\n  return authToken;\n}\n\n/**\n * Call only if FID is registered and Auth Token request is in progress.\n *\n * Waits until the current pending request finishes. If the request times out,\n * tries once in this thread as well.\n */\nasync function waitUntilAuthTokenRequest(\n  installations: FirebaseInstallationsImpl,\n  forceRefresh: boolean\n): Promise<CompletedAuthToken> {\n  // Unfortunately, there is no way of reliably observing when a value in\n  // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),\n  // so we need to poll.\n\n  let entry = await updateAuthTokenRequest(installations.appConfig);\n  while (entry.authToken.requestStatus === RequestStatus.IN_PROGRESS) {\n    // generateAuthToken still in progress.\n    await sleep(100);\n\n    entry = await updateAuthTokenRequest(installations.appConfig);\n  }\n\n  const authToken = entry.authToken;\n  if (authToken.requestStatus === RequestStatus.NOT_STARTED) {\n    // The request timed out or failed in a different call. Try again.\n    return refreshAuthToken(installations, forceRefresh);\n  } else {\n    return authToken;\n  }\n}\n\n/**\n * Called only if there is a GenerateAuthToken request in progress.\n *\n * Updates the InstallationEntry in the DB based on the status of the\n * GenerateAuthToken request.\n *\n * Returns the updated InstallationEntry.\n */\nfunction updateAuthTokenRequest(\n  appConfig: AppConfig\n): Promise<RegisteredInstallationEntry> {\n  return update(appConfig, oldEntry => {\n    if (!isEntryRegistered(oldEntry)) {\n      throw ERROR_FACTORY.create(ErrorCode.NOT_REGISTERED);\n    }\n\n    const oldAuthToken = oldEntry.authToken;\n    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {\n      return {\n        ...oldEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n    }\n\n    return oldEntry;\n  });\n}\n\nasync function fetchAuthTokenFromServer(\n  installations: FirebaseInstallationsImpl,\n  installationEntry: RegisteredInstallationEntry\n): Promise<CompletedAuthToken> {\n  try {\n    const authToken = await generateAuthTokenRequest(\n      installations,\n      installationEntry\n    );\n    const updatedInstallationEntry: RegisteredInstallationEntry = {\n      ...installationEntry,\n      authToken\n    };\n    await set(installations.appConfig, updatedInstallationEntry);\n    return authToken;\n  } catch (e) {\n    if (\n      isServerError(e) &&\n      (e.customData.serverCode === 401 || e.customData.serverCode === 404)\n    ) {\n      // Server returned a \"FID not found\" or a \"Invalid authentication\" error.\n      // Generate a new ID next time.\n      await remove(installations.appConfig);\n    } else {\n      const updatedInstallationEntry: RegisteredInstallationEntry = {\n        ...installationEntry,\n        authToken: { requestStatus: RequestStatus.NOT_STARTED }\n      };\n      await set(installations.appConfig, updatedInstallationEntry);\n    }\n    throw e;\n  }\n}\n\nfunction isEntryRegistered(\n  installationEntry: InstallationEntry | undefined\n): installationEntry is RegisteredInstallationEntry {\n  return (\n    installationEntry !== undefined &&\n    installationEntry.registrationStatus === RequestStatus.COMPLETED\n  );\n}\n\nfunction isAuthTokenValid(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.COMPLETED &&\n    !isAuthTokenExpired(authToken)\n  );\n}\n\nfunction isAuthTokenExpired(authToken: CompletedAuthToken): boolean {\n  const now = Date.now();\n  return (\n    now < authToken.creationTime ||\n    authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER\n  );\n}\n\n/** Returns an updated InstallationEntry with an InProgressAuthToken. */\nfunction makeAuthTokenRequestInProgressEntry(\n  oldEntry: RegisteredInstallationEntry\n): RegisteredInstallationEntry {\n  const inProgressAuthToken: InProgressAuthToken = {\n    requestStatus: RequestStatus.IN_PROGRESS,\n    requestTime: Date.now()\n  };\n  return {\n    ...oldEntry,\n    authToken: inProgressAuthToken\n  };\n}\n\nfunction hasAuthTokenRequestTimedOut(authToken: AuthToken): boolean {\n  return (\n    authToken.requestStatus === RequestStatus.IN_PROGRESS &&\n    authToken.requestTime + PENDING_TIMEOUT_MS < Date.now()\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Returns a Firebase Installations auth token, identifying the current\n * Firebase Installation.\n * @param installations - The `Installations` instance.\n * @param forceRefresh - Force refresh regardless of token expiration.\n *\n * @public\n */\nexport async function getToken(\n  installations: Installations,\n  forceRefresh = false\n): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  await completeInstallationRegistration(installationsImpl);\n\n  // At this point we either have a Registered Installation in the DB, or we've\n  // already thrown an error.\n  const authToken = await refreshAuthToken(installationsImpl, forceRefresh);\n  return authToken.token;\n}\n\nasync function completeInstallationRegistration(\n  installations: FirebaseInstallationsImpl\n): Promise<void> {\n  const { registrationPromise } = await getInstallationEntry(installations);\n\n  if (registrationPromise) {\n    // A createInstallation request is in progress. Wait until it finishes.\n    await registrationPromise;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app';\nimport { FirebaseError } from '@firebase/util';\nimport { AppConfig } from '../interfaces/installation-impl';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: Array<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId'\n  ];\n\n  for (const keyName of configKeys) {\n    if (!app.options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: app.options.projectId!,\n    apiKey: app.options.apiKey!,\n    appId: app.options.appId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, _getProvider } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstanceFactory,\n  ComponentContainer\n} from '@firebase/component';\nimport { getId, getToken } from '../api/index';\nimport { _FirebaseInstallationsInternal } from '../interfaces/public-types';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { extractAppConfig } from '../helpers/extract-app-config';\n\nconst INSTALLATIONS_NAME = 'installations';\nconst INSTALLATIONS_NAME_INTERNAL = 'installations-internal';\n\nconst publicFactory: InstanceFactory<'installations'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Throws if app isn't configured properly.\n  const appConfig = extractAppConfig(app);\n  const heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n\n  const installationsImpl: FirebaseInstallationsImpl = {\n    app,\n    appConfig,\n    heartbeatServiceProvider,\n    _delete: () => Promise.resolve()\n  };\n  return installationsImpl;\n};\n\nconst internalFactory: InstanceFactory<'installations-internal'> = (\n  container: ComponentContainer\n) => {\n  const app = container.getProvider('app').getImmediate();\n  // Internal FIS instance relies on public FIS instance.\n  const installations = _getProvider(app, INSTALLATIONS_NAME).getImmediate();\n\n  const installationsInternal: _FirebaseInstallationsInternal = {\n    getId: () => getId(installations),\n    getToken: (forceRefresh?: boolean) => getToken(installations, forceRefresh)\n  };\n  return installationsInternal;\n};\n\nexport function registerInstallations(): void {\n  _registerComponent(\n    new Component(INSTALLATIONS_NAME, publicFactory, ComponentType.PUBLIC)\n  );\n  _registerComponent(\n    new Component(\n      INSTALLATIONS_NAME_INTERNAL,\n      internalFactory,\n      ComponentType.PRIVATE\n    )\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInstallationEntry } from '../helpers/get-installation-entry';\nimport { refreshAuthToken } from '../helpers/refresh-auth-token';\nimport { FirebaseInstallationsImpl } from '../interfaces/installation-impl';\nimport { Installations } from '../interfaces/public-types';\n\n/**\n * Creates a Firebase Installation if there isn't one for the app and\n * returns the Installation ID.\n * @param installations - The `Installations` instance.\n *\n * @public\n */\nexport async function getId(installations: Installations): Promise<string> {\n  const installationsImpl = installations as FirebaseInstallationsImpl;\n  const { installationEntry, registrationPromise } = await getInstallationEntry(\n    installationsImpl\n  );\n\n  if (registrationPromise) {\n    registrationPromise.catch(console.error);\n  } else {\n    // If the installation is already registered, update the authentication\n    // token if needed.\n    refreshAuthToken(installationsImpl).catch(console.error);\n  }\n\n  return installationEntry.fid;\n}\n","/**\n * Firebase Installations\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerInstallations } from './functions/config';\nimport { registerVersion } from '@firebase/app';\nimport { name, version } from '../package.json';\n\nexport * from './api';\nexport * from './interfaces/public-types';\n\nregisterInstallations();\nregisterVersion(name, version);\n// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\nregisterVersion(name, version, '__BUILD_TARGET__');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Analytics.\n */\nexport const ANALYTICS_TYPE = 'analytics';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const FETCH_TIMEOUT_MILLIS = 60 * 1000;\n\nexport const DYNAMIC_CONFIG_URL =\n  'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport const enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config',\n  CONSENT = 'consent'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AnalyticsError {\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  ALREADY_INITIALIZED_SETTINGS = 'already-initialized-settings',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context',\n  INDEXEDDB_UNAVAILABLE = 'indexeddb-unavailable',\n  FETCH_THROTTLE = 'fetch-throttle',\n  CONFIG_FETCH_FAILED = 'config-fetch-failed',\n  NO_API_KEY = 'no-api-key',\n  NO_APP_ID = 'no-app-id',\n  INVALID_GTAG_RESOURCE = 'invalid-gtag-resource'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the appId {$id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each appId.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'initializeAnalytics() cannot be called again with different options than those ' +\n    'it was initially called with. It can be called again with the same options to ' +\n    'return the existing instance, or getAnalytics() can be used ' +\n    'to get a reference to the already-intialized instance.',\n  [AnalyticsError.ALREADY_INITIALIZED_SETTINGS]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate: {$reason}',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]:\n    'IndexedDB unavailable or restricted in this environment. ' +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments. Details: {$errorInfo}',\n  [AnalyticsError.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [AnalyticsError.CONFIG_FETCH_FAILED]:\n    'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',\n  [AnalyticsError.NO_API_KEY]:\n    'The \"apiKey\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid API key.',\n  [AnalyticsError.NO_APP_ID]:\n    'The \"appId\" field is empty in the local Firebase config. Firebase Analytics requires this field to' +\n    'contain a valid app ID.',\n  [AnalyticsError.INVALID_GTAG_RESOURCE]:\n    'Trusted Types detected an invalid gtag resource: {$gtagURL}.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [AnalyticsError.CONFIG_FETCH_FAILED]: {\n    httpStatus: number;\n    responseMessage: string;\n  };\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]: { errorInfo: string };\n  [AnalyticsError.INDEXEDDB_UNAVAILABLE]: { errorInfo: string };\n  [AnalyticsError.INVALID_GTAG_RESOURCE]: { gtagURL: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { DynamicConfig, DataLayer, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GTAG_URL } from './constants';\nimport { logger } from './logger';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\n\n// Possible parameter types for gtag 'event' and 'config' commands\ntype GtagConfigOrEventParams = ControlParams & EventParams & CustomParams;\n\n/**\n * Verifies and creates a TrustedScriptURL.\n */\nexport function createGtagTrustedTypesScriptURL(url: string): string {\n  if (!url.startsWith(GTAG_URL)) {\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_GTAG_RESOURCE, {\n      gtagURL: url\n    });\n    logger.warn(err.message);\n    return '';\n  }\n  return url;\n}\n\n/**\n * Makeshift polyfill for Promise.allSettled(). Resolves when all promises\n * have either resolved or rejected.\n *\n * @param promises Array of promises to wait for.\n */\nexport function promiseAllSettled<T>(\n  promises: Array<Promise<T>>\n): Promise<T[]> {\n  return Promise.all(promises.map(promise => promise.catch(e => e)));\n}\n\n/**\n * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.\n *\n * @param policyName A string containing the name of the policy\n * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods\n * | the TrustedTypePolicy reference documentation}.\n */\nexport function createTrustedTypesPolicy(\n  policyName: string,\n  policyOptions: Partial<TrustedTypePolicyOptions>\n): Partial<TrustedTypePolicy> | undefined {\n  // Create a TrustedTypes policy that we can use for updating src\n  // properties\n  let trustedTypesPolicy: Partial<TrustedTypePolicy> | undefined;\n  if (window.trustedTypes) {\n    trustedTypesPolicy = window.trustedTypes.createPolicy(\n      policyName,\n      policyOptions\n    );\n  }\n  return trustedTypesPolicy;\n}\n\n/**\n * Inserts gtag script tag into the page to asynchronously download gtag.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function insertScriptTag(\n  dataLayerName: string,\n  measurementId: string\n): void {\n  const trustedTypesPolicy = createTrustedTypesPolicy(\n    'firebase-js-sdk-policy',\n    {\n      createScriptURL: createGtagTrustedTypesScriptURL\n    }\n  );\n\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;\n  (script.src as string | TrustedScriptURL) = trustedTypesPolicy\n    ? (trustedTypesPolicy as TrustedTypePolicy)?.createScriptURL(gtagScriptURL)\n    : gtagScriptURL;\n\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/**\n * Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\").\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'config' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param measurementId GA Measurement ID to set config for.\n * @param gtagParams Gtag config params to set.\n */\nasync function gtagOnConfig(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  // If config is already fetched, we know the appId and can use it to look up what FID promise we\n  /// are waiting for, and wait only on that one.\n  const correspondingAppId = measurementIdToAppId[measurementId as string];\n  try {\n    if (correspondingAppId) {\n      await initializationPromisesMap[correspondingAppId];\n    } else {\n      // If config is not fetched yet, wait for all configs (we don't know which one we need) and\n      // find the appId (if any) corresponding to this measurementId. If there is one, wait on\n      // that appId's initialization promise. If there is none, promise resolves and gtag\n      // call goes through.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      const foundConfig = dynamicConfigResults.find(\n        config => config.measurementId === measurementId\n      );\n      if (foundConfig) {\n        await initializationPromisesMap[foundConfig.appId];\n      }\n    }\n  } catch (e) {\n    logger.error(e);\n  }\n  gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);\n}\n\n/**\n * Wrapped gtag logic when gtag is called with 'event' command.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementId GA Measurement ID to log event to.\n * @param gtagParams Params to log with this event.\n */\nasync function gtagOnEvent(\n  gtagCore: Gtag,\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementId: string,\n  gtagParams?: ControlParams & EventParams & CustomParams\n): Promise<void> {\n  try {\n    let initializationPromisesToWaitFor: Array<Promise<string>> = [];\n\n    // If there's a 'send_to' param, check if any ID specified matches\n    // an initializeIds() promise we are waiting for.\n    if (gtagParams && gtagParams['send_to']) {\n      let gaSendToList: string | string[] = gtagParams['send_to'];\n      // Make it an array if is isn't, so it can be dealt with the same way.\n      if (!Array.isArray(gaSendToList)) {\n        gaSendToList = [gaSendToList];\n      }\n      // Checking 'send_to' fields requires having all measurement ID results back from\n      // the dynamic config fetch.\n      const dynamicConfigResults = await promiseAllSettled(\n        dynamicConfigPromisesList\n      );\n      for (const sendToId of gaSendToList) {\n        // Any fetched dynamic measurement ID that matches this 'send_to' ID\n        const foundConfig = dynamicConfigResults.find(\n          config => config.measurementId === sendToId\n        );\n        const initializationPromise =\n          foundConfig && initializationPromisesMap[foundConfig.appId];\n        if (initializationPromise) {\n          initializationPromisesToWaitFor.push(initializationPromise);\n        } else {\n          // Found an item in 'send_to' that is not associated\n          // directly with an FID, possibly a group.  Empty this array,\n          // exit the loop early, and let it get populated below.\n          initializationPromisesToWaitFor = [];\n          break;\n        }\n      }\n    }\n\n    // This will be unpopulated if there was no 'send_to' field , or\n    // if not all entries in the 'send_to' field could be mapped to\n    // a FID. In these cases, wait on all pending initialization promises.\n    if (initializationPromisesToWaitFor.length === 0) {\n      initializationPromisesToWaitFor = Object.values(\n        initializationPromisesMap\n      );\n    }\n\n    // Run core gtag function with args after all relevant initialization\n    // promises have been resolved.\n    await Promise.all(initializationPromisesToWaitFor);\n    // Workaround for http://b/141370449 - third argument cannot be undefined.\n    gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});\n  } catch (e) {\n    logger.error(e);\n  }\n}\n\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer.\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  /**\n   * Allows wrapped gtag calls to wait on whichever intialization promises are required,\n   * depending on the contents of the gtag params' `send_to` field, if any.\n   */\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  /**\n   * Wrapped gtag calls sometimes require all dynamic config fetches to have returned\n   * before determining what initialization promises (which include FIDs) to wait for.\n   */\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  /**\n   * Wrapped gtag config calls can narrow down which initialization promise (with FID)\n   * to wait for if the measurementId is already fetched, by getting the corresponding appId,\n   * which is the key for the initialization promises map.\n   */\n  measurementIdToAppId: { [measurementId: string]: string }\n): Gtag {\n  /**\n   * Wrapper around gtag that ensures FID is sent with gtag calls.\n   * @param command Gtag command type.\n   * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.\n   * @param gtagParams Params if event is EVENT/CONFIG.\n   */\n  async function gtagWrapper(\n    command: 'config' | 'set' | 'event' | 'consent',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: GtagConfigOrEventParams | ConsentSettings\n  ): Promise<void> {\n    try {\n      // If event, check that relevant initialization promises have completed.\n      if (command === GtagCommand.EVENT) {\n        // If EVENT, second arg must be measurementId.\n        await gtagOnEvent(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONFIG) {\n        // If CONFIG, second arg must be measurementId.\n        await gtagOnConfig(\n          gtagCore,\n          initializationPromisesMap,\n          dynamicConfigPromisesList,\n          measurementIdToAppId,\n          idOrNameOrParams as string,\n          gtagParams as GtagConfigOrEventParams\n        );\n      } else if (command === GtagCommand.CONSENT) {\n        // If CONFIG, second arg must be measurementId.\n        gtagCore(GtagCommand.CONSENT, 'update', gtagParams as ConsentSettings);\n      } else {\n        // If SET, second arg must be params.\n        gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n      }\n    } catch (e) {\n      logger.error(e);\n    }\n  }\n  return gtagWrapper as Gtag;\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializationPromisesMap Map of appIds to their initialization promises.\n * @param dynamicConfigPromisesList Array of dynamic config fetch promises.\n * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified).\n */\nexport function wrapOrCreateGtag(\n  initializationPromisesMap: { [appId: string]: Promise<string> },\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [measurementId: string]: string },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(\n    gtagCore,\n    initializationPromisesMap,\n    dynamicConfigPromisesList,\n    measurementIdToAppId\n  );\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns the script tag in the DOM matching both the gtag url pattern\n * and the provided data layer name.\n */\nexport function findGtagScriptOnPage(\n  dataLayerName: string\n): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (\n      tag.src &&\n      tag.src.includes(GTAG_URL) &&\n      tag.src.includes(dataLayerName)\n    ) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Most logic is copied from packages/remote-config/src/client/retrying_client.ts\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { DynamicConfig, ThrottleMetadata, MinimalDynamicConfig } from './types';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { DYNAMIC_CONFIG_URL, FETCH_TIMEOUT_MILLIS } from './constants';\nimport { logger } from './logger';\n\n// App config fields needed by analytics.\nexport interface AppFields {\n  appId: string;\n  apiKey: string;\n  measurementId?: string;\n}\n\n/**\n * Backoff factor for 503 errors, which we want to be conservative about\n * to avoid overloading servers. Each retry interval will be\n * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one\n * will be ~30 seconds (with fuzzing).\n */\nexport const LONG_RETRY_FACTOR = 30;\n\n/**\n * Base wait interval to multiplied by backoffFactor^backoffCount.\n */\nconst BASE_INTERVAL_MILLIS = 1000;\n\n/**\n * Stubbable retry data storage class.\n */\nclass RetryData {\n  constructor(\n    public throttleMetadata: { [appId: string]: ThrottleMetadata } = {},\n    public intervalMillis: number = BASE_INTERVAL_MILLIS\n  ) {}\n\n  getThrottleMetadata(appId: string): ThrottleMetadata {\n    return this.throttleMetadata[appId];\n  }\n\n  setThrottleMetadata(appId: string, metadata: ThrottleMetadata): void {\n    this.throttleMetadata[appId] = metadata;\n  }\n\n  deleteThrottleMetadata(appId: string): void {\n    delete this.throttleMetadata[appId];\n  }\n}\n\nconst defaultRetryData = new RetryData();\n\n/**\n * Set GET request headers.\n * @param apiKey App API key.\n */\nfunction getHeaders(apiKey: string): Headers {\n  return new Headers({\n    Accept: 'application/json',\n    'x-goog-api-key': apiKey\n  });\n}\n\n/**\n * Fetches dynamic config from backend.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfig(\n  appFields: AppFields\n): Promise<DynamicConfig> {\n  const { appId, apiKey } = appFields;\n  const request: RequestInit = {\n    method: 'GET',\n    headers: getHeaders(apiKey)\n  };\n  const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);\n  const response = await fetch(appUrl, request);\n  if (response.status !== 200 && response.status !== 304) {\n    let errorMessage = '';\n    try {\n      // Try to get any error message text from server response.\n      const jsonResponse = (await response.json()) as {\n        error?: { message?: string };\n      };\n      if (jsonResponse.error?.message) {\n        errorMessage = jsonResponse.error.message;\n      }\n    } catch (_ignored) {}\n    throw ERROR_FACTORY.create(AnalyticsError.CONFIG_FETCH_FAILED, {\n      httpStatus: response.status,\n      responseMessage: errorMessage\n    });\n  }\n  return response.json();\n}\n\n/**\n * Fetches dynamic config from backend, retrying if failed.\n * @param app Firebase app to fetch config for.\n */\nexport async function fetchDynamicConfigWithRetry(\n  app: FirebaseApp,\n  // retryData and timeoutMillis are parameterized to allow passing a different value for testing.\n  retryData: RetryData = defaultRetryData,\n  timeoutMillis?: number\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, apiKey, measurementId } = app.options;\n\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n\n  if (!apiKey) {\n    if (measurementId) {\n      return {\n        measurementId,\n        appId\n      };\n    }\n    throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n  }\n\n  const throttleMetadata: ThrottleMetadata = retryData.getThrottleMetadata(\n    appId\n  ) || {\n    backoffCount: 0,\n    throttleEndTimeMillis: Date.now()\n  };\n\n  const signal = new AnalyticsAbortSignal();\n\n  setTimeout(\n    async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      signal.abort();\n    },\n    timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS\n  );\n\n  return attemptFetchDynamicConfigWithRetry(\n    { appId, apiKey, measurementId },\n    throttleMetadata,\n    signal,\n    retryData\n  );\n}\n\n/**\n * Runs one retry attempt.\n * @param appFields Necessary app config fields.\n * @param throttleMetadata Ongoing metadata to determine throttling times.\n * @param signal Abort signal.\n */\nasync function attemptFetchDynamicConfigWithRetry(\n  appFields: AppFields,\n  { throttleEndTimeMillis, backoffCount }: ThrottleMetadata,\n  signal: AnalyticsAbortSignal,\n  retryData: RetryData = defaultRetryData // for testing\n): Promise<DynamicConfig | MinimalDynamicConfig> {\n  const { appId, measurementId } = appFields;\n  // Starts with a (potentially zero) timeout to support resumption from stored state.\n  // Ensures the throttle end time is honored if the last attempt timed out.\n  // Note the SDK will never make a request if the fetch timeout expires at this point.\n  try {\n    await setAbortableTimeout(signal, throttleEndTimeMillis);\n  } catch (e) {\n    if (measurementId) {\n      logger.warn(\n        `Timed out fetching this Firebase app's measurement ID from the server.` +\n          ` Falling back to the measurement ID ${measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config. [${\n            (e as Error)?.message\n          }]`\n      );\n      return { appId, measurementId };\n    }\n    throw e;\n  }\n\n  try {\n    const response = await fetchDynamicConfig(appFields);\n\n    // Note the SDK only clears throttle state if response is success or non-retriable.\n    retryData.deleteThrottleMetadata(appId);\n\n    return response;\n  } catch (e) {\n    const error = e as Error;\n    if (!isRetriableError(error)) {\n      retryData.deleteThrottleMetadata(appId);\n      if (measurementId) {\n        logger.warn(\n          `Failed to fetch this Firebase app's measurement ID from the server.` +\n            ` Falling back to the measurement ID ${measurementId}` +\n            ` provided in the \"measurementId\" field in the local Firebase config. [${error?.message}]`\n        );\n        return { appId, measurementId };\n      } else {\n        throw e;\n      }\n    }\n\n    const backoffMillis =\n      Number(error?.customData?.httpStatus) === 503\n        ? calculateBackoffMillis(\n            backoffCount,\n            retryData.intervalMillis,\n            LONG_RETRY_FACTOR\n          )\n        : calculateBackoffMillis(backoffCount, retryData.intervalMillis);\n\n    // Increments backoff state.\n    const throttleMetadata = {\n      throttleEndTimeMillis: Date.now() + backoffMillis,\n      backoffCount: backoffCount + 1\n    };\n\n    // Persists state.\n    retryData.setThrottleMetadata(appId, throttleMetadata);\n    logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);\n\n    return attemptFetchDynamicConfigWithRetry(\n      appFields,\n      throttleMetadata,\n      signal,\n      retryData\n    );\n  }\n}\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nfunction setAbortableTimeout(\n  signal: AnalyticsAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(AnalyticsError.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Shims a minimal AbortSignal (copied from Remote Config).\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class AnalyticsAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  CustomParams,\n  ControlParams,\n  EventParams,\n  ConsentSettings\n} from './public-types';\nimport { Gtag } from './types';\nimport { GtagCommand } from './constants';\n\n/**\n * Event parameters to set on 'gtag' during initialization.\n */\nexport let defaultEventParametersForInit: CustomParams | undefined;\n\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport async function logEvent(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.EVENT, eventName, eventParams);\n    return;\n  } else {\n    const measurementId = await initializationPromise;\n    const params: EventParams | ControlParams = {\n      ...eventParams,\n      'send_to': measurementId\n    };\n    gtagFunction(GtagCommand.EVENT, eventName, params);\n  }\n}\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport async function setCurrentScreen(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport async function setUserId(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport async function setUserProperties(\n  gtagFunction: Gtag,\n  initializationPromise: Promise<string>,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): Promise<void> {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n    return Promise.resolve();\n  } else {\n    const measurementId = await initializationPromise;\n    gtagFunction(GtagCommand.CONFIG, measurementId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport async function setAnalyticsCollectionEnabled(\n  initializationPromise: Promise<string>,\n  enabled: boolean\n): Promise<void> {\n  const measurementId = await initializationPromise;\n  window[`ga-disable-${measurementId}`] = !enabled;\n}\n\n/**\n * Consent parameters to default to during 'gtag' initialization.\n */\nexport let defaultConsentSettingsForInit: ConsentSettings | undefined;\n\n/**\n * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of\n * analytics.\n *\n * @param consentSettings Maps the applicable end user consent state for gtag.js.\n */\nexport function _setConsentDefaultForInit(\n  consentSettings?: ConsentSettings\n): void {\n  defaultConsentSettingsForInit = consentSettings;\n}\n\n/**\n * Sets the variable `defaultEventParametersForInit` for use in the initialization of\n * analytics.\n *\n * @param customParams Any custom params the user may pass to gtag.js.\n */\nexport function _setDefaultEventParametersForInit(\n  customParams?: CustomParams\n): void {\n  defaultEventParametersForInit = customParams;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DynamicConfig, Gtag, MinimalDynamicConfig } from './types';\nimport { GtagCommand, GA_FID_KEY, ORIGIN_KEY } from './constants';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { fetchDynamicConfigWithRetry } from './get-config';\nimport { logger } from './logger';\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable\n} from '@firebase/util';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { findGtagScriptOnPage, insertScriptTag } from './helpers';\nimport { AnalyticsSettings } from './public-types';\nimport {\n  defaultConsentSettingsForInit,\n  _setConsentDefaultForInit,\n  defaultEventParametersForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\n\nasync function validateIndexedDB(): Promise<boolean> {\n  if (!isIndexedDBAvailable()) {\n    logger.warn(\n      ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n        errorInfo: 'IndexedDB is not available in this environment.'\n      }).message\n    );\n    return false;\n  } else {\n    try {\n      await validateIndexedDBOpenable();\n    } catch (e) {\n      logger.warn(\n        ERROR_FACTORY.create(AnalyticsError.INDEXEDDB_UNAVAILABLE, {\n          errorInfo: (e as Error)?.toString()\n        }).message\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n * @param dynamicConfigPromisesList Array of all dynamic config promises.\n * @param measurementIdToAppId Maps measurementID to appID.\n * @param installations _FirebaseInstallationsInternal instance.\n *\n * @returns Measurement ID.\n */\nexport async function _initializeAnalytics(\n  app: FirebaseApp,\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >,\n  measurementIdToAppId: { [key: string]: string },\n  installations: _FirebaseInstallationsInternal,\n  gtagCore: Gtag,\n  dataLayerName: string,\n  options?: AnalyticsSettings\n): Promise<string> {\n  const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);\n  // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.\n  dynamicConfigPromise\n    .then(config => {\n      measurementIdToAppId[config.measurementId] = config.appId;\n      if (\n        app.options.measurementId &&\n        config.measurementId !== app.options.measurementId\n      ) {\n        logger.warn(\n          `The measurement ID in the local Firebase config (${app.options.measurementId})` +\n            ` does not match the measurement ID fetched from the server (${config.measurementId}).` +\n            ` To ensure analytics events are always sent to the correct Analytics property,` +\n            ` update the` +\n            ` measurement ID field in the local config or remove it from the local config.`\n        );\n      }\n    })\n    .catch(e => logger.error(e));\n  // Add to list to track state of all dynamic config promises.\n  dynamicConfigPromisesList.push(dynamicConfigPromise);\n\n  const fidPromise: Promise<string | undefined> = validateIndexedDB().then(\n    envIsValid => {\n      if (envIsValid) {\n        return installations.getId();\n      } else {\n        return undefined;\n      }\n    }\n  );\n\n  const [dynamicConfig, fid] = await Promise.all([\n    dynamicConfigPromise,\n    fidPromise\n  ]);\n\n  // Detect if user has already put the gtag <script> tag on this page with the passed in\n  // data layer name.\n  if (!findGtagScriptOnPage(dataLayerName)) {\n    insertScriptTag(dataLayerName, dynamicConfig.measurementId);\n  }\n\n  // Detects if there are consent settings that need to be configured.\n  if (defaultConsentSettingsForInit) {\n    gtagCore(GtagCommand.CONSENT, 'default', defaultConsentSettingsForInit);\n    _setConsentDefaultForInit(undefined);\n  }\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (gtagCore as any)('js', new Date());\n  // User config added first. We don't want users to accidentally overwrite\n  // base Firebase config properties.\n  const configProperties: Record<string, unknown> = options?.config ?? {};\n\n  // guard against developers accidentally setting properties with prefix `firebase_`\n  configProperties[ORIGIN_KEY] = 'firebase';\n  configProperties.update = true;\n\n  if (fid != null) {\n    configProperties[GA_FID_KEY] = fid;\n  }\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  // Note: This will trigger a page_view event unless 'send_page_view' is set to false in\n  // `configProperties`.\n  gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);\n\n  // Detects if there is data that will be set on every event logged from the SDK.\n  if (defaultEventParametersForInit) {\n    gtagCore(GtagCommand.SET, defaultEventParametersForInit);\n    _setDefaultEventParametersForInit(undefined);\n  }\n\n  return dynamicConfig.measurementId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsOptions, Analytics, AnalyticsSettings } from './public-types';\nimport { Gtag, DynamicConfig, MinimalDynamicConfig } from './types';\nimport { getOrCreateDataLayer, wrapOrCreateGtag } from './helpers';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { areCookiesEnabled, isBrowserExtension } from '@firebase/util';\nimport { _initializeAnalytics } from './initialize-analytics';\nimport { logger } from './logger';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\n\n/**\n * Analytics Service class.\n */\nexport class AnalyticsService implements Analytics, _FirebaseService {\n  constructor(public app: FirebaseApp) {}\n  _delete(): Promise<void> {\n    delete initializationPromisesMap[this.app.options.appId!];\n    return Promise.resolve();\n  }\n}\n\n/**\n * Maps appId to full initialization promise. Wrapped gtag calls must wait on\n * all or some of these, depending on the call's `send_to` param and the status\n * of the dynamic config fetches (see below).\n */\nexport let initializationPromisesMap: {\n  [appId: string]: Promise<string>; // Promise contains measurement ID string.\n} = {};\n\n/**\n * List of dynamic config fetch promises. In certain cases, wrapped gtag calls\n * wait on all these to be complete in order to determine if it can selectively\n * wait for only certain initialization (FID) promises or if it must wait for all.\n */\nlet dynamicConfigPromisesList: Array<\n  Promise<DynamicConfig | MinimalDynamicConfig>\n> = [];\n\n/**\n * Maps fetched measurementIds to appId. Populated when the app's dynamic config\n * fetch completes. If already populated, gtag config calls can use this to\n * selectively wait for only this app's initialization promise (FID) instead of all\n * initialization promises.\n */\nconst measurementIdToAppId: { [measurementId: string]: string } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nexport let wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n * @internal\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newInitializationPromisesMap = {},\n  newDynamicPromises = []\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializationPromisesMap = newInitializationPromisesMap;\n  dynamicConfigPromisesList = newDynamicPromises;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n * @internal\n */\nexport function getGlobalVars(): {\n  initializationPromisesMap: { [appId: string]: Promise<string> };\n  dynamicConfigPromisesList: Array<\n    Promise<DynamicConfig | MinimalDynamicConfig>\n  >;\n} {\n  return {\n    initializationPromisesMap,\n    dynamicConfigPromisesList\n  };\n}\n\n/**\n * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.\n * Intended to be used if `gtag.js` script has been installed on\n * this page independently of Firebase Analytics, and is using non-default\n * names for either the `gtag` function or for `dataLayer`.\n * Must be called before calling `getAnalytics()` or it won't\n * have any effect.\n *\n * @public\n *\n * @param options - Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\n/**\n * Returns true if no environment mismatch is found.\n * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT\n * error that also lists details for each mismatch found.\n */\nfunction warnOnBrowserContextMismatch(): void {\n  const mismatchedEnvMessages = [];\n  if (isBrowserExtension()) {\n    mismatchedEnvMessages.push('This is a browser extension environment.');\n  }\n  if (!areCookiesEnabled()) {\n    mismatchedEnvMessages.push('Cookies are not available.');\n  }\n  if (mismatchedEnvMessages.length > 0) {\n    const details = mismatchedEnvMessages\n      .map((message, index) => `(${index + 1}) ${message}`)\n      .join(' ');\n    const err = ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT, {\n      errorInfo: details\n    });\n    logger.warn(err.message);\n  }\n}\n\n/**\n * Analytics instance factory.\n * @internal\n */\nexport function factory(\n  app: FirebaseApp,\n  installations: _FirebaseInstallationsInternal,\n  options?: AnalyticsSettings\n): AnalyticsService {\n  warnOnBrowserContextMismatch();\n  const appId = app.options.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_APP_ID);\n  }\n  if (!app.options.apiKey) {\n    if (app.options.measurementId) {\n      logger.warn(\n        `The \"apiKey\" field is empty in the local Firebase config. This is needed to fetch the latest` +\n          ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +\n          ` provided in the \"measurementId\" field in the local Firebase config.`\n      );\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.NO_API_KEY);\n    }\n  }\n  if (initializationPromisesMap[appId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: appId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializationPromisesMap,\n      dynamicConfigPromisesList,\n      measurementIdToAppId,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  // This map reflects the completion state of all promises for each appId.\n  initializationPromisesMap[appId] = _initializeAnalytics(\n    app,\n    dynamicConfigPromisesList,\n    measurementIdToAppId,\n    installations,\n    gtagCoreFunction,\n    dataLayerName,\n    options\n  );\n\n  const analyticsInstance: AnalyticsService = new AnalyticsService(app);\n\n  return analyticsInstance;\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport {\n  Analytics,\n  AnalyticsCallOptions,\n  AnalyticsSettings,\n  ConsentSettings,\n  CustomParams,\n  EventNameString,\n  EventParams\n} from './public-types';\nimport { Provider } from '@firebase/component';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension,\n  getModularInstance,\n  deepEqual\n} from '@firebase/util';\nimport { ANALYTICS_TYPE, GtagCommand } from './constants';\nimport {\n  AnalyticsService,\n  initializationPromisesMap,\n  wrappedGtagFunction\n} from './factory';\nimport { logger } from './logger';\nimport {\n  logEvent as internalLogEvent,\n  setCurrentScreen as internalSetCurrentScreen,\n  setUserId as internalSetUserId,\n  setUserProperties as internalSetUserProperties,\n  setAnalyticsCollectionEnabled as internalSetAnalyticsCollectionEnabled,\n  _setConsentDefaultForInit,\n  _setDefaultEventParametersForInit\n} from './functions';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\n\nexport { settings } from './factory';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    [ANALYTICS_TYPE]: AnalyticsService;\n  }\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function getAnalytics(app: FirebaseApp = getApp()): Analytics {\n  app = getModularInstance(app);\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n\n  if (analyticsProvider.isInitialized()) {\n    return analyticsProvider.getImmediate();\n  }\n\n  return initializeAnalytics(app);\n}\n\n/**\n * Returns an {@link Analytics} instance for the given app.\n *\n * @public\n *\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n */\nexport function initializeAnalytics(\n  app: FirebaseApp,\n  options: AnalyticsSettings = {}\n): Analytics {\n  // Dependencies\n  const analyticsProvider: Provider<'analytics'> = _getProvider(\n    app,\n    ANALYTICS_TYPE\n  );\n  if (analyticsProvider.isInitialized()) {\n    const existingInstance = analyticsProvider.getImmediate();\n    if (deepEqual(options, analyticsProvider.getOptions())) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n    }\n  }\n  const analyticsInstance = analyticsProvider.initialize({ options });\n  return analyticsInstance;\n}\n\n/**\n * This is a public static method provided to users that wraps four different checks:\n *\n * 1. Check if it's not a browser extension environment.\n * 2. Check if cookies are enabled in current browser.\n * 3. Check if IndexedDB is supported by the browser environment.\n * 4. Check if the current browser context is valid for using `IndexedDB.open()`.\n *\n * @public\n *\n */\nexport async function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Use gtag `config` command to set `screen_name`.\n *\n * @public\n *\n * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.\n * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param screenName - Screen name to set.\n */\nexport function setCurrentScreen(\n  analyticsInstance: Analytics,\n  screenName: string,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetCurrentScreen(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    screenName,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set `user_id`.\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param id - User ID to set.\n */\nexport function setUserId(\n  analyticsInstance: Analytics,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserId(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    id,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Use gtag `config` command to set all params specified.\n *\n * @public\n */\nexport function setUserProperties(\n  analyticsInstance: Analytics,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetUserProperties(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    properties,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Sets whether Google Analytics collection is enabled for this app on this device.\n * Sets global `window['ga-disable-analyticsId'] = true;`\n *\n * @public\n *\n * @param analyticsInstance - The {@link Analytics} instance.\n * @param enabled - If true, enables collection, if false, disables it.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsInstance: Analytics,\n  enabled: boolean\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalSetAnalyticsCollectionEnabled(\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    enabled\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Adds data that will be set on every event logged from the SDK, including automatic ones.\n * With gtag's \"set\" command, the values passed persist on the current page and are passed with\n * all subsequent events.\n * @public\n * @param customParams - Any custom params the user may pass to gtag.js.\n */\nexport function setDefaultEventParameters(customParams: CustomParams): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.SET, customParams);\n  } else {\n    _setDefaultEventParametersForInit(customParams);\n  }\n}\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_payment_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    payment_type?: EventParams['payment_type'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_shipping_info',\n  eventParams?: {\n    coupon?: EventParams['coupon'];\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    shipping_tier?: EventParams['shipping_tier'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'add_to_cart' | 'add_to_wishlist' | 'remove_from_cart',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'begin_checkout',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'checkout_progress',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    coupon?: EventParams['coupon'];\n    value?: EventParams['value'];\n    items?: EventParams['items'];\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/exceptions\n * | Measure exceptions}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'exception',\n  eventParams?: {\n    description?: EventParams['description'];\n    fatal?: EventParams['fatal'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'generate_lead',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'login',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See\n * {@link https://developers.google.com/analytics/devguides/collection/ga4/page-view\n * | Page views}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'page_view',\n  eventParams?: {\n    page_title?: string;\n    page_location?: string;\n    page_path?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'purchase' | 'refund',\n  eventParams?: {\n    value?: EventParams['value'];\n    currency?: EventParams['currency'];\n    transaction_id: EventParams['transaction_id'];\n    tax?: EventParams['tax'];\n    shipping?: EventParams['shipping'];\n    items?: EventParams['items'];\n    coupon?: EventParams['coupon'];\n    affiliation?: EventParams['affiliation'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * See {@link https://firebase.google.com/docs/analytics/screenviews\n * | Track Screenviews}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'screen_view',\n  eventParams?: {\n    firebase_screen: EventParams['firebase_screen'];\n    firebase_screen_class: EventParams['firebase_screen_class'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'search' | 'view_search_results',\n  eventParams?: {\n    search_term?: EventParams['search_term'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_content',\n  eventParams?: {\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_item',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'select_promotion' | 'view_promotion',\n  eventParams?: {\n    items?: EventParams['items'];\n    promotion_id?: EventParams['promotion_id'];\n    promotion_name?: EventParams['promotion_name'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'set_checkout_option',\n  eventParams?: {\n    checkout_step?: EventParams['checkout_step'];\n    checkout_option?: EventParams['checkout_option'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'share',\n  eventParams?: {\n    method?: EventParams['method'];\n    content_type?: EventParams['content_type'];\n    item_id?: EventParams['item_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'sign_up',\n  eventParams?: {\n    method?: EventParams['method'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'timing_complete',\n  eventParams?: {\n    name: string;\n    value: number;\n    event_category?: string;\n    event_label?: string;\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_cart' | 'view_item',\n  eventParams?: {\n    currency?: EventParams['currency'];\n    items?: EventParams['items'];\n    value?: EventParams['value'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: 'view_item_list',\n  eventParams?: {\n    items?: EventParams['items'];\n    item_list_name?: EventParams['item_list_name'];\n    item_list_id?: EventParams['item_list_id'];\n    [key: string]: any;\n  },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * @public\n * List of recommended event parameters can be found in\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n */\nexport function logEvent<T extends string>(\n  analyticsInstance: Analytics,\n  eventName: CustomEventName<T>,\n  eventParams?: { [key: string]: any },\n  options?: AnalyticsCallOptions\n): void;\n\n/**\n * Sends a Google Analytics event with given `eventParams`. This method\n * automatically associates this logged event with this Firebase web\n * app instance on this device.\n * List of official event parameters can be found in the gtag.js\n * reference documentation:\n * {@link https://developers.google.com/gtagjs/reference/ga4-events\n * | the GA4 reference documentation}.\n *\n * @public\n */\nexport function logEvent(\n  analyticsInstance: Analytics,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  analyticsInstance = getModularInstance(analyticsInstance);\n  internalLogEvent(\n    wrappedGtagFunction,\n    initializationPromisesMap[analyticsInstance.app.options.appId!],\n    eventName,\n    eventParams,\n    options\n  ).catch(e => logger.error(e));\n}\n\n/**\n * Any custom event name string not in the standard list of recommended\n * event names.\n * @public\n */\nexport type CustomEventName<T> = T extends EventNameString ? never : T;\n\n/**\n * Sets the applicable end user consent state for this web app across all gtag references once\n * Firebase Analytics is initialized.\n *\n * Use the {@link ConsentSettings} to specify individual consent type values. By default consent\n * types are set to \"granted\".\n * @public\n * @param consentSettings - Maps the applicable end user consent state for gtag.js.\n */\nexport function setConsent(consentSettings: ConsentSettings): void {\n  // Check if reference to existing gtag function on window object exists\n  if (wrappedGtagFunction) {\n    wrappedGtagFunction(GtagCommand.CONSENT, 'update', consentSettings);\n  } else {\n    _setConsentDefaultForInit(consentSettings);\n  }\n}\n","/**\n * Firebase Analytics\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { factory } from './factory';\nimport { ANALYTICS_TYPE } from './constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './errors';\nimport { logEvent } from './api';\nimport { name, version } from '../package.json';\nimport { AnalyticsCallOptions } from './public-types';\nimport '@firebase/installations';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\nfunction registerAnalytics(): void {\n  _registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      (container, { options: analyticsOptions }: InstanceFactoryOptions) => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations-internal')\n          .getImmediate();\n\n        return factory(app, installations, analyticsOptions);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  _registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: (\n          eventName: string,\n          eventParams?: { [key: string]: unknown },\n          options?: AnalyticsCallOptions\n        ) => logEvent(analytics, eventName, eventParams, options)\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e as Error\n      });\n    }\n  }\n}\n\nregisterAnalytics();\n\nexport * from './api';\nexport * from './public-types';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformationWithEffectiveType extends NetworkInformation {\n  // `effectiveType` is an experimental property and not included in\n  // TypeScript's typings for the native NetworkInformation interface\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformationWithEffectiveType;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if (navigator?.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(\n            Number(options.metrics[metricName])\n          );\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger ?? 0);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings\n      );\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(\n          performanceController,\n          navigationTimings,\n          paintTimings,\n          fid\n        );\n      }\n    });\n  } else {\n    Trace.createOobTrace(\n      performanceController,\n      navigationTimings,\n      paintTimings\n    );\n  }\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * Firebase Performance Monitoring\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n","//FIREBASE CONFIG\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport { getPerformance } from \"firebase/performance\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDRpWKRNqOpvvCcCvK7_45wTO2ITxDXhmg\",\n  authDomain: \"ip-tracker-1bb45.firebaseapp.com\",\n  projectId: \"ip-tracker-1bb45\",\n  storageBucket: \"ip-tracker-1bb45.appspot.com\",\n  messagingSenderId: \"875007932485\",\n  appId: \"1:875007932485:web:8edd30b294d510f4e40b2c\",\n  measurementId: \"G-QC7D90MG5N\",\n};\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\nconst perf = getPerformance();\n\n//VARIABLESgit a\nlet map;\nconst tileLayer = L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n  maxZoom: 19,\n});\nlet ipAddress = \"\";\nlet domainName = \"\";\nconst submitButton = document.querySelector(\"#submit\");\nconst inputArea = document.querySelector(\"input\");\n\n//VISITOR IP BY DEFAULT\nfetch(\"https://api.ipify.org/?format=json\")\n  .then((res) => res.json())\n  .then((data) => {\n    getCoordinates(data.ip);\n  })\n  .catch((error) => {\n    console.error(error);\n  });\n\n//GET LATITUDE AND LONGITUDE\nasync function getCoordinates(inputValue) {\n  if (/^([0-9]{1,3}\\.){3}[0-9]{1,3}$/.test(inputValue)) {\n    ipAddress = inputValue;\n    inputArea.classList.remove(\"error\");\n  } else if (/^[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\\.[a-zA-Z]{2,}$/.test(inputValue)) {\n    inputArea.classList.remove(\"error\");\n\n    domainName = inputValue;\n  } else {\n    inputArea.classList.add(\"error\");\n  }\n  try {\n    const res = await fetch(\"https://geo.ipify.org/api/v2/country,city?apiKey=at_dfH8tDzTsnI6Fb3ulm1ilJVI7g7qd&ipAddress=\" + ipAddress + \"&domain=\" + domainName);\n    const data = await res.json();\n    updateResult(data);\n    const { lat, lng } = data.location;\n    updateMap(lat, lng);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n//UPDATE MAP\nasync function updateMap(latitude, longitude) {\n  try {\n    if (map) {\n      map.remove();\n    }\n    const spinner = document.querySelector(\"#spinner\");\n    spinner.style.display = \"none\";\n    map = L.map(\"map\").setView([latitude, longitude], 14);\n    tileLayer.addTo(map);\n    L.marker([latitude, longitude]).addTo(map);\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n//UPDATE RESULT\nconst addressResult = document.querySelector(\".result__item--address p\");\nconst locationResult = document.querySelector(\".result__item--location p\");\nconst timezoneResult = document.querySelector(\".result__item--timezone p\");\nconst ispResult = document.querySelector(\".result__item--isp p\");\nasync function updateResult(data) {\n  addressResult.textContent = data.ip;\n  locationResult.textContent = data.location.city;\n  timezoneResult.textContent = \"UTC \" + data.location.timezone;\n  ispResult.textContent = data.isp;\n}\n\n//SUBMIT FORM\nsubmitButton.addEventListener(\"click\", () => {\n  getCoordinates(inputArea.value);\n});\ndocument.addEventListener(\"keypress\", (e) => {\n  if (e.key === \"Enter\") {\n    getCoordinates(inputArea.value);\n  }\n});\n"],"names":["$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","$cfae44f0dfdf62c0$exports","$cfae44f0dfdf62c0$var$defaultSetTimout","Error","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","call","this","clearTimeout","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","length","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","stringToByteArray","str","out","p","c","charCodeAt","$c38e0f42709c826a$export$b3b2de96497acc47","byteToCharMap_","charToByteMap_","byteToCharMapWebSafe_","charToByteMapWebSafe_","ENCODED_VALS_BASE","ENCODED_VALS","ENCODED_VALS_WEBSAFE","HAS_NATIVE_SUPPORT","atob","encodeByteArray","input","webSafe","isArray","init_","byteToCharMap","output","byte1","haveByte2","byte2","haveByte3","byte3","outByte1","outByte2","outByte3","outByte4","join","encodeString","btoa","decodeString","bytes","pos","c1","String","fromCharCode","c2","u","c3","$c38e0f42709c826a$var$byteArrayToString","decodeStringToByteArray","charToByteMap","charAt","byte4","$c38e0f42709c826a$export$55ca9d4bee46aeb3","constructor","$c38e0f42709c826a$export$4b5284a3025a455","utf8Bytes","$c38e0f42709c826a$export$e510a73ee562749","replace","$c38e0f42709c826a$export$c62426fdd000a97e","console","error","$c38e0f42709c826a$var$getDefaultsFromGlobal","self","window","$parcel$global","$c38e0f42709c826a$export$a4e55266d2135a7f","__FIREBASE_DEFAULTS__","$c38e0f42709c826a$export$212bb2fc580a90a8","$c38e0f42709c826a$var$getDefaultsFromEnvVariable","document","match","cookie","decoded","JSON","parse","$c38e0f42709c826a$var$getDefaultsFromCookie","info","$c38e0f42709c826a$export$3dfb6827a9f89756","_a","config","$c38e0f42709c826a$export$85f6557964517f1a","reject","resolve","promise","Promise","wrapCallback","callback","value","catch","$c38e0f42709c826a$export$caa8774a9107a58e","runtime","chrome","undefined","id","$c38e0f42709c826a$export$3865db50535c2055","indexedDB","$c38e0f42709c826a$export$a8a3018f3d187a4d","preExist","DB_CHECK_NAME","request","open","onsuccess","result","close","deleteDatabase","onupgradeneeded","onerror","message","$c38e0f42709c826a$export$f172b7eb6cf60599","navigator","cookieEnabled","$c38e0f42709c826a$export$dd24e9cd51226c56","code","customData","super","Object","setPrototypeOf","captureStackTrace","$c38e0f42709c826a$export$3fa6e1b18a3b2d40","create","service","serviceName","errors","data","fullCode","template","$c38e0f42709c826a$var$PATTERN","_","key","$c38e0f42709c826a$var$replaceTemplate","fullMessage","$c38e0f42709c826a$export$9cb4719e2e525b7a","a","b","aKeys","keys","bKeys","k","includes","aProp","bProp","$c38e0f42709c826a$var$isObject","thing","$c38e0f42709c826a$var$DEFAULT_INTERVAL_MILLIS","$c38e0f42709c826a$var$DEFAULT_BACKOFF_FACTOR","$c38e0f42709c826a$export$bdf1213ffbdb096e","$c38e0f42709c826a$export$3518ed2cfe61fa30","$c38e0f42709c826a$export$4d810c0ca64ed8e9","backoffCount","intervalMillis","backoffFactor","currBaseValue","Math","pow","randomWait","round","random","min","$c38e0f42709c826a$export$4befe9b5fa509a1b","_delegate","$a83e7ccd68ca8d4e$export$16fa2f45be04daa8","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","$a83e7ccd68ca8d4e$var$DEFAULT_ENTRY_NAME","$a83e7ccd68ca8d4e$export$2881499e37b75b9a","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","getImmediate","options","optional","getComponent","setComponent","$a83e7ccd68ca8d4e$var$isComponentEager","instanceDeferred","entries","clearInstance","delete","async","services","from","values","all","filter","map","INTERNAL","_delete","isComponentSet","getOptions","initialize","opts","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","$a83e7ccd68ca8d4e$export$436a80eea5d5c0c5","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders","$45b460d9de9b230f$var$instances","$45b460d9de9b230f$export$243e62d78d3b544d","LogLevel","$45b460d9de9b230f$var$levelStringToEnum","debug","DEBUG","verbose","VERBOSE","INFO","warn","WARN","ERROR","silent","SILENT","$45b460d9de9b230f$var$defaultLogLevel","$45b460d9de9b230f$var$ConsoleMethod","$45b460d9de9b230f$var$defaultLogHandler","logType","logLevel","now","Date","toISOString","method","$45b460d9de9b230f$export$efa9a398d6368992","_logLevel","_logHandler","_userLogHandler","val","TypeError","setLogLevel","logHandler","userLogHandler","log","$e67bf383372d72f4$export$23f2a1d2818174ef","object","constructors","some","$e67bf383372d72f4$var$idbProxyableTypes","$e67bf383372d72f4$var$cursorAdvanceMethods","$e67bf383372d72f4$var$cursorRequestMap","WeakMap","$e67bf383372d72f4$var$transactionDoneMap","$e67bf383372d72f4$var$transactionStoreNamesMap","$e67bf383372d72f4$var$transformCache","$e67bf383372d72f4$export$407448d2b89b1813","$e67bf383372d72f4$var$idbProxyTraps","target","prop","receiver","IDBTransaction","objectStoreNames","objectStore","$e67bf383372d72f4$export$efccba1c4a2ef57b","$e67bf383372d72f4$var$wrapFunction","func","IDBDatabase","transaction","IDBCursor","advance","continue","continuePrimaryKey","$e67bf383372d72f4$export$3b14a55fb2447963","storeNames","tx","sort","$e67bf383372d72f4$var$transformCachableValue","done","unlisten","removeEventListener","complete","DOMException","addEventListener","$e67bf383372d72f4$var$cacheDonePromiseForTransaction","IDBObjectStore","IDBIndex","Proxy","IDBRequest","success","then","$e67bf383372d72f4$var$promisifyRequest","newValue","$da032767b57a4aa4$export$ca0ed41b1a2af7e","blocked","upgrade","blocking","terminated","openPromise","event","oldVersion","newVersion","db","$da032767b57a4aa4$var$readMethods","$da032767b57a4aa4$var$writeMethods","$da032767b57a4aa4$var$cachedMethods","$da032767b57a4aa4$var$getMethod","targetFuncName","useIndex","isWrite","storeName","store","index","shift","oldTraps","$57d436074e210fb5$var$PlatformLoggerServiceImpl","getPlatformInfoString","$57d436074e210fb5$var$isVersionServiceProvider","library","logString","$57d436074e210fb5$var$logger","$57d436074e210fb5$export$9f30fa0c10967f7f","$57d436074e210fb5$var$PLATFORM_LOG_STRING","$57d436074e210fb5$var$name$o","appName","firebase","$57d436074e210fb5$export$b4e3c36c855b14b5","$57d436074e210fb5$export$9566bce3835c0f28","$57d436074e210fb5$export$fa5244b94c62d36a","app","$57d436074e210fb5$export$c930050e7bb63965","componentName","$57d436074e210fb5$export$fa0d6da0f5838f50","heartbeatController","triggerHeartbeat","$57d436074e210fb5$var$ERROR_FACTORY","$57d436074e210fb5$var$FirebaseAppImpl","_isDeleted","_options","assign","_config","_name","_automaticDataCollectionEnabled","automaticDataCollectionEnabled","_container","checkDestroyed","isDeleted","$57d436074e210fb5$export$c55cfd413944906d","rawConfig","existingApp","newApp","$57d436074e210fb5$export$f9962582c9e66d99","$57d436074e210fb5$export$d29d5299a7137abc","libraryKeyOrName","variant","libraryMismatch","versionMismatch","warning","$57d436074e210fb5$var$DB_NAME","$57d436074e210fb5$var$DB_VERSION","$57d436074e210fb5$var$STORE_NAME","$57d436074e210fb5$var$dbPromise","$57d436074e210fb5$var$getDbPromise","createObjectStore","originalErrorMessage","$57d436074e210fb5$var$writeHeartbeatsToIndexedDB","heartbeatObject","put","$57d436074e210fb5$var$computeKey","idbGetError","appId","$57d436074e210fb5$var$HeartbeatServiceImpl","_heartbeatsCache","_storage","$57d436074e210fb5$var$HeartbeatStorageImpl","_heartbeatsCachePromise","read","agent","date","$57d436074e210fb5$var$getUTCDateString","lastSentHeartbeatDate","heartbeats","singleDateHeartbeat","hbTimestamp","valueOf","overwrite","heartbeatsToSend","unsentEntries","heartbeatsCache","maxSize","slice","heartbeatEntry","find","hb","dates","$57d436074e210fb5$var$countBytes","pop","$57d436074e210fb5$var$extractHeartbeatsForHeader","headerString","stringify","substring","_canUseIndexedDBPromise","runIndexedDBEnvironmentCheck","$57d436074e210fb5$var$readHeartbeatsFromIndexedDB","heartbeatsObject","existingHeartbeatsObject","$1ee9b91e988771f9$var$PENDING_TIMEOUT_MS","$1ee9b91e988771f9$var$PACKAGE_VERSION","$1ee9b91e988771f9$var$version","$1ee9b91e988771f9$var$INTERNAL_AUTH_VERSION","$1ee9b91e988771f9$var$INSTALLATIONS_API_URL","$1ee9b91e988771f9$var$TOKEN_EXPIRATION_BUFFER","$1ee9b91e988771f9$var$ERROR_FACTORY","$1ee9b91e988771f9$var$isServerError","$1ee9b91e988771f9$var$getInstallationsEndpoint","projectId","$1ee9b91e988771f9$var$extractAuthTokenInfoFromResponse","response","token","requestStatus","expiresIn","responseExpiresIn","Number","creationTime","$1ee9b91e988771f9$var$getErrorFromResponse","requestName","errorData","json","serverCode","serverMessage","serverStatus","status","$1ee9b91e988771f9$var$getHeaders","apiKey","Headers","Accept","$1ee9b91e988771f9$var$getHeadersWithAuth","appConfig","refreshToken","headers","append","$1ee9b91e988771f9$var$getAuthorizationHeader","$1ee9b91e988771f9$var$retryIfServerError","fn","$1ee9b91e988771f9$var$sleep","ms","$1ee9b91e988771f9$var$VALID_FID_PATTERN","$1ee9b91e988771f9$var$INVALID_FID","$1ee9b91e988771f9$var$generateFid","fidByteArray","Uint8Array","crypto","msCrypto","getRandomValues","fid","b64String","substr","$1ee9b91e988771f9$var$encode","test","$1ee9b91e988771f9$var$getKey","$1ee9b91e988771f9$var$fidChangeCallbacks","$1ee9b91e988771f9$var$fidChanged","$1ee9b91e988771f9$var$callFidChangeCallbacks","channel","$1ee9b91e988771f9$var$getBroadcastChannel","postMessage","$1ee9b91e988771f9$var$closeBroadcastChannel","$1ee9b91e988771f9$var$broadcastFidChange","$1ee9b91e988771f9$var$broadcastChannel","BroadcastChannel","onmessage","size","$1ee9b91e988771f9$var$DATABASE_NAME","$1ee9b91e988771f9$var$DATABASE_VERSION","$1ee9b91e988771f9$var$OBJECT_STORE_NAME","$1ee9b91e988771f9$var$dbPromise","$1ee9b91e988771f9$var$getDbPromise","$1ee9b91e988771f9$var$set","oldValue","$1ee9b91e988771f9$var$remove","$1ee9b91e988771f9$var$update","updateFn","$1ee9b91e988771f9$var$getInstallationEntry","installations","registrationPromise","installationEntry","oldEntry","entry","registrationStatus","$1ee9b91e988771f9$var$clearTimedOutRequest","$1ee9b91e988771f9$var$updateOrCreateInstallationEntry","entryWithPromise","onLine","inProgressEntry","registrationTime","registeredInstallationEntry","heartbeatServiceProvider","endpoint","heartbeatService","heartbeatsHeader","getHeartbeatsHeader","body","authVersion","sdkVersion","fetch","ok","responseValue","authToken","$1ee9b91e988771f9$var$createInstallationRequest","$1ee9b91e988771f9$var$registerInstallation","$1ee9b91e988771f9$var$waitUntilFidRegistration","$1ee9b91e988771f9$var$triggerRegistrationIfNecessary","$1ee9b91e988771f9$var$updateInstallationRequest","$1ee9b91e988771f9$var$generateAuthTokenRequest","$1ee9b91e988771f9$var$getGenerateAuthTokenEndpoint","installation","$1ee9b91e988771f9$var$refreshAuthToken","forceRefresh","tokenPromise","$1ee9b91e988771f9$var$isEntryRegistered","oldAuthToken","$1ee9b91e988771f9$var$isAuthTokenExpired","$1ee9b91e988771f9$var$isAuthTokenValid","$1ee9b91e988771f9$var$updateAuthTokenRequest","$1ee9b91e988771f9$var$waitUntilAuthTokenRequest","inProgressAuthToken","requestTime","$1ee9b91e988771f9$var$makeAuthTokenRequestInProgressEntry","updatedInstallationEntry","$1ee9b91e988771f9$var$fetchAuthTokenFromServer","$1ee9b91e988771f9$export$257b2d10b709d8ef","installationsImpl","$1ee9b91e988771f9$var$completeInstallationRegistration","$1ee9b91e988771f9$var$getMissingValueError","valueName","$1ee9b91e988771f9$var$INSTALLATIONS_NAME","$1ee9b91e988771f9$var$internalFactory","getId","$1ee9b91e988771f9$export$218c8c3169c024d2","getToken","configKeys","keyName","$1ee9b91e988771f9$var$extractAppConfig","$1ee9b91e988771f9$var$name","$0d15f034d14801d0$var$ANALYTICS_TYPE","$0d15f034d14801d0$var$GA_FID_KEY","$0d15f034d14801d0$var$ORIGIN_KEY","$0d15f034d14801d0$var$FETCH_TIMEOUT_MILLIS","$0d15f034d14801d0$var$DYNAMIC_CONFIG_URL","$0d15f034d14801d0$var$GTAG_URL","$0d15f034d14801d0$var$logger","$0d15f034d14801d0$var$ERROR_FACTORY","$0d15f034d14801d0$var$createGtagTrustedTypesScriptURL","url","startsWith","err","gtagURL","$0d15f034d14801d0$var$promiseAllSettled","promises","$0d15f034d14801d0$var$insertScriptTag","dataLayerName","measurementId","trustedTypesPolicy","policyName","policyOptions","trustedTypes","createPolicy","$0d15f034d14801d0$var$createTrustedTypesPolicy","createScriptURL","script","createElement","gtagScriptURL","src","head","appendChild","$0d15f034d14801d0$var$wrapGtag","gtagCore","initializationPromisesMap","dynamicConfigPromisesList","measurementIdToAppId","command","idOrNameOrParams","gtagParams","initializationPromisesToWaitFor","gaSendToList","dynamicConfigResults","sendToId","foundConfig","initializationPromise","$0d15f034d14801d0$var$gtagOnEvent","correspondingAppId","$0d15f034d14801d0$var$gtagOnConfig","$0d15f034d14801d0$var$LONG_RETRY_FACTOR","$0d15f034d14801d0$var$defaultRetryData","throttleMetadata","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","$0d15f034d14801d0$var$getHeaders","$0d15f034d14801d0$var$fetchDynamicConfigWithRetry","retryData","timeoutMillis","throttleEndTimeMillis","signal","$0d15f034d14801d0$var$AnalyticsAbortSignal","abort","$0d15f034d14801d0$var$attemptFetchDynamicConfigWithRetry","appFields","backoffMillis","max","$0d15f034d14801d0$var$setAbortableTimeout","appUrl","errorMessage","jsonResponse","_ignored","httpStatus","responseMessage","$0d15f034d14801d0$var$fetchDynamicConfig","$0d15f034d14801d0$var$isRetriableError","listener","forEach","$0d15f034d14801d0$var$defaultEventParametersForInit","$0d15f034d14801d0$var$defaultConsentSettingsForInit","$0d15f034d14801d0$var$_setConsentDefaultForInit","consentSettings","$0d15f034d14801d0$var$_setDefaultEventParametersForInit","customParams","$0d15f034d14801d0$var$_initializeAnalytics","dynamicConfigPromise","fidPromise","errorInfo","toString","$0d15f034d14801d0$var$validateIndexedDB","envIsValid","dynamicConfig","scriptTags","getElementsByTagName","tag","$0d15f034d14801d0$var$findGtagScriptOnPage","configProperties","update","$0d15f034d14801d0$var$AnalyticsService","$0d15f034d14801d0$var$initializationPromisesMap","$0d15f034d14801d0$var$dynamicConfigPromisesList","$0d15f034d14801d0$var$measurementIdToAppId","$0d15f034d14801d0$var$gtagCoreFunction","$0d15f034d14801d0$var$wrappedGtagFunction","$0d15f034d14801d0$var$dataLayerName","$0d15f034d14801d0$var$gtagName","$0d15f034d14801d0$var$globalInitDone","$0d15f034d14801d0$var$factory","mismatchedEnvMessages","details","$0d15f034d14801d0$var$warnOnBrowserContextMismatch","dataLayer","$0d15f034d14801d0$var$getOrCreateDataLayer","wrappedGtag","gtagFunctionName","_args","$0d15f034d14801d0$var$wrapOrCreateGtag","$0d15f034d14801d0$export$5e9eec8001665ac5","analyticsInstance","eventName","eventParams","gtagFunction","global","send_to","internalLogEvent","analyticsOptions","analytics","logEvent","reason","$0d15f034d14801d0$var$name","$0d15f034d14801d0$var$version","$5d460bce9481376e$var$SDK_VERSION","$5d460bce9481376e$var$version","$5d460bce9481376e$var$TRACE_MEASURE_PREFIX","$5d460bce9481376e$var$OOB_TRACE_PAGE_LOAD_PREFIX","$5d460bce9481376e$var$FIRST_CONTENTFUL_PAINT_COUNTER_NAME","$5d460bce9481376e$var$FIRST_INPUT_DELAY_COUNTER_NAME","$5d460bce9481376e$var$CONFIG_LOCAL_STORAGE_KEY","$5d460bce9481376e$var$CONFIG_EXPIRY_LOCAL_STORAGE_KEY","$5d460bce9481376e$var$SERVICE_NAME","$5d460bce9481376e$var$ERROR_FACTORY","$5d460bce9481376e$var$consoleLogger","$5d460bce9481376e$var$apiInstance","$5d460bce9481376e$var$windowInstance","$5d460bce9481376e$var$iid","$5d460bce9481376e$var$settingsServiceInstance","$5d460bce9481376e$var$Api","window1","performance","PerformanceObserver","windowLocation","location","localStorage","perfMetrics","onFirstInputDelay","getUrl","href","split","mark","measure","measureName","mark1","mark2","getEntriesByType","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","setupObserver","entryType","list","getEntries","observe","entryTypes","static","$5d460bce9481376e$var$getIid","$5d460bce9481376e$var$mergeStrings","part1","part2","sizeDiff","resultArray","$5d460bce9481376e$var$SettingsService","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getFlTransportFullUrl","$5d460bce9481376e$var$VisibilityState","VisibilityState","$5d460bce9481376e$var$RESERVED_ATTRIBUTE_PREFIXES","$5d460bce9481376e$var$ATTRIBUTE_FORMAT_REGEX","RegExp","$5d460bce9481376e$var$getServiceWorkerStatus","getInstance","serviceWorker","controller","$5d460bce9481376e$var$getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","$5d460bce9481376e$var$getEffectiveConnectionType","navigatorConnection","connection","effectiveType","$5d460bce9481376e$var$getAppId","firebaseApp","$5d460bce9481376e$var$REMOTE_CONFIG_SDK_VERSION","$5d460bce9481376e$var$DEFAULT_CONFIGS","$5d460bce9481376e$var$FIS_AUTH_PREFIX","$5d460bce9481376e$var$getConfig","performanceController","iid","expiryString","getItem","expiry","configStringified","$5d460bce9481376e$var$getStoredConfig","$5d460bce9481376e$var$processConfig","installationsService","authTokenPromise","authTokenVal","$5d460bce9481376e$var$getAuthTokenPromise","$5d460bce9481376e$var$getProjectId","$5d460bce9481376e$var$getApiKey","Request","Authorization","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","$5d460bce9481376e$var$COULD_NOT_GET_CONFIG_MSG","$5d460bce9481376e$var$getRemoteConfig","setItem","$5d460bce9481376e$var$storeConfig","settingsServiceInstance","fpr_enabled","fpr_log_source","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","$5d460bce9481376e$var$shouldLogAfterSampling","samplingRate","$5d460bce9481376e$var$initializationPromise","$5d460bce9481376e$var$initializationStatus","$5d460bce9481376e$var$getInitializationPromise","readyState","handler","$5d460bce9481376e$var$getDocumentReadyComplete","iidPromise","iidVal","$5d460bce9481376e$var$getIidPromise","$5d460bce9481376e$var$changeInitializationStatus","$5d460bce9481376e$var$initializePerf","$5d460bce9481376e$var$DEFAULT_SEND_INTERVAL_MS","$5d460bce9481376e$var$DEFAULT_REMAINING_TRIES","$5d460bce9481376e$var$MAX_EVENT_COUNT_PER_REQUEST","$5d460bce9481376e$var$logger","$5d460bce9481376e$var$remainingTries","$5d460bce9481376e$var$queue","$5d460bce9481376e$var$isTransportSetup","$5d460bce9481376e$var$processQueue","timeOffset","staged","splice","log_event","evt","source_extension_json_proto3","event_time_ms","eventTime","flTransportFullUrl","$5d460bce9481376e$var$postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","logResponseDetails","responseAction","$5d460bce9481376e$var$sendEventsToFl","request_time_ms","client_info","client_type","js_client_info","log_source","$5d460bce9481376e$var$dispatchQueueEvents","$5d460bce9481376e$var$transportHandler","serializer","$5d460bce9481376e$var$addToQueue","$5d460bce9481376e$var$sendLog","resource","resourceType","$5d460bce9481376e$var$serializer","$5d460bce9481376e$var$logTrace","trace","settingsService","isAuto","$5d460bce9481376e$var$sendTraceLog","networkRequest","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","$5d460bce9481376e$var$getApplicationInfo","network_request_metric","$5d460bce9481376e$var$serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","counters","customAttributes","getAttributes","custom_attributes","trace_metric","$5d460bce9481376e$var$serializeTrace","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","$5d460bce9481376e$var$oobMetrics","$5d460bce9481376e$var$Trace","traceMeasureName","state","api","randomId","floor","traceStartMark","traceStopMark","traceMeasure","calculateTraceMetrics","start","traceName","stop","record","startTime","duration","attributes","metrics","metricName","incrementMetric","counter","numAsInteger","putMetric","indexOf","customMetricName","providedValue","valueAsInteger","$5d460bce9481376e$var$convertMetricValueToInteger","getMetric","putAttribute","attr","isValidName","prefix","isValidValue","$5d460bce9481376e$var$isValidCustomAttributeValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","paintObject","firstContentfulPaint","$5d460bce9481376e$var$createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","$5d460bce9481376e$var$logNetworkRequest","transferSize","$5d460bce9481376e$var$FID_WAIT_TIME_MS","$5d460bce9481376e$var$setupOobResources","timeoutId","createOobTrace","$5d460bce9481376e$var$setupOobTraces","resources","$5d460bce9481376e$var$setupNetworkRequests","measures","$5d460bce9481376e$var$createUserTimingTrace","$5d460bce9481376e$var$setupUserTimingTraces","createUserTimingTrace","$5d460bce9481376e$var$PerformanceController","initialized","_init","settings","isAvailable","perfInstance","$5d460bce9481376e$var$name","analyticsProvider","$0d15f034d14801d0$export$e1ffb6ba450b0317","authDomain","storageBucket","messagingSenderId","$6b17f08f738443dc$var$map","$6b17f08f738443dc$var$tileLayer","L","tileLayer","maxZoom","$6b17f08f738443dc$var$ipAddress","$6b17f08f738443dc$var$domainName","$6b17f08f738443dc$var$submitButton","querySelector","$6b17f08f738443dc$var$inputArea","$6b17f08f738443dc$var$getCoordinates","inputValue","classList","remove","$6b17f08f738443dc$var$addressResult","textContent","ip","$6b17f08f738443dc$var$locationResult","city","$6b17f08f738443dc$var$timezoneResult","timezone","$6b17f08f738443dc$var$ispResult","isp","$6b17f08f738443dc$var$updateResult","lat","lng","latitude","longitude","style","display","setView","addTo","$6b17f08f738443dc$var$updateMap"],"version":3,"file":"index.bcbc1a9e.js.map"}